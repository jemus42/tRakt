% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trakt.search.R
\name{trakt.search}
\alias{trakt.search}
\alias{trakt.search.byid}
\title{Search for a show via text query or id}
\source{
\href{https://trakt.docs.apiary.io/#reference/search/text-query/get-text-query-results}{The trakt.tv API docs}
}
\usage{
trakt.search(query, type = c("movie", "show", "episode", "person",
  "list"), years = NULL, n_results = 1L, extended = c("min", "full"))

trakt.search.byid(id, id_type = c("trakt", "imdb", "tmdb", "tvdb"),
  type = c("movie", "show", "episode", "person", "list"),
  n_results = 1L, extended = c("min", "full"))
}
\arguments{
\item{query}{The keyword used for the search.}

\item{type}{\code{character(1) ["movie"]}: The type of data you're looking for. One of \code{show},
\code{movie}, \code{episode}, \code{person} or \code{list} or a character vector with those elements, e.g.
\code{c("show", "movie")}.}

\item{years}{Optionally filter by years.}

\item{n_results}{\code{integer(1) [1]}: How many results to return.}

\item{extended}{\code{character(1)}: Either \code{"min"} (API default) or \code{"full"}. The latter
returns more variables and should generally only be used if required.}

\item{id}{The id used for the search.}

\item{id_type}{The type of \code{id}. One of \code{trakt} (default), \code{imdb}, \code{tmdb}, \code{tvdb}.}
}
\value{
A \link[tibble:tibble-package]{tibble} containing a \code{n_result} result.
If no results are found, the \code{tibble} has 0 rows.
}
\description{
Search for a show or movie with a keyword (e.g. \code{"Breaking Bad"}) and receive
basic info of the first search result. It's main use is to retrieve
the ids or proper show/movie title for further use, as well
as receiving a quick overview of a show/movie. The amount of
information returned is equal to \code{.summary} API methods and also depends on
the value of \code{extended}.
}
\note{
The API technically allows concatenated types for text query searches,
e.g. \code{movie,show,episode} to search all three types of items, but this is not supported
in this package. If you really want this functionality, open an issue on GitHub.
}
\examples{
\dontrun{
# A show
trakt.search("Breaking Bad", type = "show", n_results = 3)

# A show by its trakt id, and now with more information
trakt.search.byid(1388, "trakt", type = "show", extended = "full")

# A person
trakt.search("J. K. Simmons", type = "person", extended = "full")

# A movie or a show
trakt.search("Tron", "movie", n_results = 2)
trakt.search("Tron", "show", n_results = 2)
}
}
\seealso{
Other API-basics: \code{\link{trakt.api.call}},
  \code{\link{trakt_credentials}}
}
\concept{API-basics}
\concept{search functions}
