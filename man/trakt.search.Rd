% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trakt-search.R
\name{trakt.search}
\alias{trakt.search}
\alias{trakt.search.byid}
\title{Search for a show via text query or id}
\usage{
trakt.search(query, type = "show", years = NULL, n_results = 1L,
  extended = c("min", "full"))

trakt.search.byid(id, id_type = c("trakt", "imdb", "tmdb", "tvdb"),
  type = "movie", n_results = 1L, extended = c("min", "full"))
}
\arguments{
\item{query}{\code{character(1)}: The keyword used for the search, e.g.
\code{"breaking bad"}.}

\item{type}{\code{character(1) ["show"]}: The type of data you're looking for.
One of \code{show}, \code{movie}, \code{episode}, \code{person} or \code{list} or a character vector
with those elements, e.g. \code{c("show", "movie")}. Note that not every
combination is reasonably combinable, e.g. \code{c("movie", "list")}. Use
separate function calls in that case.}

\item{years}{\code{integer(1)}: 4-digit year \strong{or} range, e.g. \code{2010-2020}. Can also be an integer
vector of length two which will be coerced appropriately.}

\item{n_results}{\code{integer(1) [1]}: How many results to return.}

\item{extended}{\code{character(1)}: Either \code{"min"} (API default) or \code{"full"}. The latter
returns more variables and should generally only be used if required.}

\item{id}{\code{character(1)}: The id used for the search, e.g. \code{14701} for
a \code{Trakt ID}.}

\item{id_type}{\code{character(1) ["trakt"]}: The type of \code{id}. One of \code{trakt},
\code{imdb}, \code{tmdb}, \code{tvdb}.}
}
\value{
A \link[tibble:tibble-package]{tibble} containing \code{n_results} results.
If no results are found, the \code{tibble} has 0 rows.
If more than one \code{type} is specified, e.g. \code{c("movie", "show")},
there will be \code{n_results} results \emph{per type}.
}
\description{
Search for a show or movie with a keyword (e.g. \code{"Breaking Bad"}) and receive
basic info of the first search result. It's main use is to retrieve
the ids or proper show/movie title for further use, as well
as receiving a quick overview of a show/movie.
}
\details{
The amount of information returned is equal to \code{.summary} API methods and
in turn depends on the value of \code{extended}.
See also the
\href{https://trakt.docs.apiary.io/#reference/search}{API reference here} for
which fields of the item metadata are searched by default.
}
\examples{
# A show
trakt.search("Breaking Bad", type = "show", n_results = 3)
\dontrun{
# A show by its trakt id, and now with more information
trakt.search.byid(1388, "trakt", type = "show", extended = "full")

# A person
trakt.search("J. K. Simmons", type = "person", extended = "full")

# A movie or a show, two of each
trakt.search("Tron", type = c("movie", "show"), n_results = 2)
}
}
\seealso{
Other API-basics: \code{\link{trakt_credentials}},
  \code{\link{trakt_get}}
}
\concept{API-basics}
