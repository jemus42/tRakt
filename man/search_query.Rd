% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search.R
\name{search_query}
\alias{search_query}
\alias{search_id}
\title{Search trakt.tv via text query or ID}
\source{
\href{https://trakt.docs.apiary.io/#reference/search/text-query/get-text-query-results}{search/:type?query=}

\href{https://trakt.docs.apiary.io/#reference/search/id-lookup/get-text-query-results}{search/:id_type/:id?type=}
}
\usage{
search_query(query, type = "show", n_results = 1L,
  extended = c("min", "full"), years = NULL, genres = NULL,
  languages = NULL, countries = NULL, runtimes = NULL,
  ratings = NULL, certifications = NULL, networks = NULL,
  status = NULL)

search_id(id, id_type = c("trakt", "imdb", "tmdb", "tvdb"),
  type = "show", n_results = 1L, extended = c("min", "full"))
}
\arguments{
\item{query}{\code{character(1)}: Search string for titles and descriptions.
For \code{search_query()} other fields are searched depending on the \code{type} of media.
See \href{https://trakt.docs.apiary.io/#reference/search/text-query}{the API docs} for a
full reference.}

\item{type}{\code{character(1) ["show"]}: The type of data you're looking for.
One of \code{show}, \code{movie}, \code{episode}, \code{person} or \code{list} or a character vector
with those elements, e.g. \code{c("show", "movie")}. Note that not every
combination is reasonably combinable, e.g. \code{c("movie", "list")}. Use
separate function calls in that case.}

\item{n_results}{\code{integer(1) [1]}: How many results to return.}

\item{extended}{\code{character(1)}: Either \code{"min"} (API default) or \code{"full"}. The latter
returns more variables and should generally only be used if required.
See \code{vignette("finding-things", package = "tRakt")} for more details.}

\item{years}{\code{character | integer}: 4-digit year (\code{2010}) \strong{or} range,
e.g. \code{"2010-2020"}. Can also be an integer vector of length two which will be
coerced appropriately, e.g. \code{c(2010, 2020)}.}

\item{genres}{\code{character(n)}: Genre  slug(s).
See \code{\link{trakt_genres}} for a table of genres.
Multiple values are allowed and will be concatenated.}

\item{languages}{\code{character(n)}: Two-letter language code(s).
Also see \code{\link{trakt_languages}} for available languages (code and name).}

\item{countries}{\code{character(n)}: Two-letter country code(s).
See \code{\link{trakt_countries}}.}

\item{runtimes}{\code{character | integer}: Integer range in minutes, e.g. \code{30-90}.
Can also be an integer vector of length two which will be coerced appropriately.}

\item{ratings}{\code{character | integer}:  Integer range between \code{0} and \code{100}.
Can also be an integer vector of length two which will be coerced appropriately.
Note that user-supplied ratings are in the range of 1 to 10, yet the ratings
on the site itself are scaled to the range of 1 to 100.}

\item{certifications}{\code{character(n)}: Certification(s) like \code{pg-13}.
Multiple values are allowed. Use \code{\link{trakt_certifications}} for reference.
Note that there are different certifications for shows and movies.}

\item{networks}{\code{character(n)}: (Shows only) Network name like \code{HBO}.
See \code{\link{trakt_networks}} for a list of known networks.}

\item{status}{\code{character(n)}: (Shows only) The status of the shows.
One of \code{"returning series"}, \code{"in production"}, \code{"planned"},
\code{"canceled"}, or \code{"ended"}.}

\item{id}{\code{character(1)}: The id used for the search, e.g. \code{14701} for
a \code{Trakt ID}.}

\item{id_type}{\code{character(1) ["trakt"]}: The type of \code{id}. One of \code{trakt},
\code{imdb}, \code{tmdb}, \code{tvdb}.}
}
\value{
A \link[tibble:tibble-package]{tibble} containing \code{n_results} results.
Variable \code{type} is equivalent to the value of the \code{type} argument, and
variable \code{score} indicates the search match, where \code{1000} is a perfect
match.
If no results are found, the \code{tibble} has 0 rows.
If more than one \code{type} is specified, e.g. \code{c("movie", "show")},
there will be \code{n_results} results \emph{per type}.
}
\description{
Search for a show or movie with a keyword (e.g. \code{"Breaking Bad"}) and receive
basic info of the first search result. It's main use is to retrieve
the IDs or proper show/movie title for further use, as well
as receiving a quick overview of a show/movie.
}
\details{
The amount of information returned is equal to \code{*_summary} API methods and
in turn depends on the value of \code{extended}.
See also the
\href{https://trakt.docs.apiary.io/#reference/search}{API reference here} for
which fields of the item metadata are searched by default.
}
\examples{
# A show
search_query("Breaking Bad", type = "show", n_results = 3)
\dontrun{
# A show by its trakt id, and now with more information
search_id(1388, "trakt", type = "show", extended = "full")

# A person
search_query("J. K. Simmons", type = "person", extended = "full")

# A movie or a show, two of each
search_query("Tron", type = c("movie", "show"), n_results = 2)
}
}
\concept{search functions}
