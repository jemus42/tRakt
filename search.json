[{"path":"https://jemus42.github.io/tRakt/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jemus42.github.io/tRakt/articles/Implemented-API-methods.html","id":"misc","dir":"Articles","previous_headings":"","what":"Misc","title":"Implemented API methods","text":"endpoints used check filter arguments. output cached tidied format package datasets.","code":""},{"path":"https://jemus42.github.io/tRakt/articles/finding-things.html","id":"item-identifiers","dir":"Articles","previous_headings":"","what":"Item identifiers","title":"Finding things (and the right amount)","text":"id parameter used identify shows, movies people. cases, value parameter must valid ID one following kinds: Trakt ID (trakt): numeric ID used trakt.tv, included variable named trakt every function output item. IDs unique respective category (type, e.g. shows, movies, people, …) can expected full coverage, meaning every item category-specific Trakt ID. Slug (slug): human-readable identifier used trakt.tv site, e.g. -wire. easy remember, risk clashing numeric IDs. One example show “24”, slug 24. However, show “Presidio Med” Trakt ID 24, supply id = 24 API assumes meant Trakt ID instead slug. … suboptimal. Use trakt ID’s whenever possible sort user-facing application batch-processing. IMDb ID (imdb): Relatively self-explanatory. can retrieve easily via functions searching IMDb.com. Since IMDb external service, IDs used linking data sources rather search parameters trakt API, can guaranteed every item trakt.tv IMDb ID. API return additional IDs, notably tvdb. useful linking data sources like fanart.tv. used search parameters trakt API. API also includes TVRage ID, since site seems exist anymore (therefore newer items don’t ID) ID removed output.","code":""},{"path":"https://jemus42.github.io/tRakt/articles/finding-things.html","id":"extended-information","dir":"Articles","previous_headings":"","what":"Extended Information:","title":"Finding things (and the right amount)","text":"extended parameter controls amount information (.e. number variables) included output. \"min\": default option returns minimal information. shows, movies, episodes people, result include title name, possibly year, standard set IDs (see section ). fastest option requires less content sent API less post-processing work produce tabular output. \"full\": maximum amount information. option required interested votes rating variables, well additional metadata like air dates, plot summaries, plethora variables depending type. intend retrieving data large number items, e.g. via [popular_media], highly recommend cache output locally using extended = \"full\" subsequently use extended = \"min\". can merge [dplyr::left_join()] minimal data cached data.","code":""},{"path":"https://jemus42.github.io/tRakt/articles/show-analysis-24.html","id":"step-1-search","dir":"Articles","previous_headings":"","what":"Step 1: Search","title":"Show Analysis: 24","text":"Use search function find show ’re looking .","code":"show_info <- search_query(\"24\", type = \"show\") show_info #> # A tibble: 1 × 9 #>   type  score title          year trakt  slug          tvdb   imdb       tmdb   #>   <chr> <dbl> <chr>         <int> <chr>  <chr>         <chr>  <chr>      <chr>  #> 1 show   234. Yakamoz S-245  2022 194241 yakamoz-s-245 394252 tt13317454 195930"},{"path":"https://jemus42.github.io/tRakt/articles/show-analysis-24.html","id":"step-2-use-the-id","dir":"Articles","previous_headings":"","what":"Step 2: Use the ID","title":"Show Analysis: 24","text":"Use trakt ID (recommended IDs) subsequent API calls. case, ’ll use seasons_summary() get data seasons show, also getting additional list-column containing episode data, includes user ratings.","code":"seasons <- seasons_summary(show_info$trakt, extended = \"full\", episodes = TRUE) glimpse(seasons) #> Rows: 1 #> Columns: 14 #> $ season         <int> 1 #> $ rating         <dbl> 6.51429 #> $ votes          <int> 35 #> $ episode_count  <int> 7 #> $ aired_episodes <int> 7 #> $ title          <chr> \"Season 1\" #> $ overview       <chr> \"After disaster strikes Earth, a marine biologist on a … #> $ first_aired    <dttm> 2022-04-20 07:00:00 #> $ updated_at     <dttm> 2025-03-13 05:59:22 #> $ network        <chr> \"Netflix\" #> $ episodes       <list> [<tbl_df[7 x 17]>] #> $ trakt          <chr> \"290166\" #> $ tvdb           <chr> NA #> $ tmdb           <chr> \"284769\""},{"path":"https://jemus42.github.io/tRakt/articles/show-analysis-24.html","id":"step-3-tidying-up","dir":"Articles","previous_headings":"","what":"Step 3: Tidying up","title":"Show Analysis: 24","text":"’re interested episodes list-column, needs unnesting. case can simply use dplyr::bind_rows take list tbls seasons$episodes basically rbind together, meaning result tibble episode data care .","code":"library(dplyr)  episodes <- bind_rows(seasons$episodes) glimpse(episodes) #> Rows: 7 #> Columns: 17 #> $ season                 <int> 1, 1, 1, 1, 1, 1, 1 #> $ episode                <int> 1, 2, 3, 4, 5, 6, 7 #> $ title                  <chr> \"Episode 1\", \"Episode 2\", \"Episode 3\", \"Episode… #> $ episode_abs            <lgl> NA, NA, NA, NA, NA, NA, NA #> $ overview               <chr> \"Arman reluctantly embarks on a submarine resea… #> $ rating                 <dbl> 6.95714, 7.05405, 7.08571, 7.29670, 7.13483, 7.… #> $ votes                  <int> 140, 111, 105, 91, 89, 86, 90 #> $ comment_count          <int> 1, 0, 1, 0, 1, 1, 1 #> $ first_aired            <dttm> 2022-04-20 07:00:00, 2022-04-20 07:00:00, 2022-… #> $ updated_at             <dttm> 2025-03-12 19:57:27, 2025-03-12 19:57:27, 2025-… #> $ available_translations <list> <\"cs\", \"de\", \"el\", \"en\", \"fr\", \"it\", \"ko\", \"pl\"… #> $ runtime                <int> 46, 44, 41, 51, 50, 54, 50 #> $ episode_type           <chr> \"series_premiere\", \"standard\", \"standard\", \"sta… #> $ trakt                  <chr> \"5990234\", \"6014174\", \"6014175\", \"6014176\", \"60… #> $ tvdb                   <chr> \"8209034\", \"8209035\", \"8209036\", \"8209037\", \"8… #> $ imdb                   <chr> \"tt13840052\", \"tt13840054\", \"tt13840058\", \"tt1… #> $ tmdb                   <chr> \"3617839\", \"3640494\", \"3640495\", \"3640496\", \"3…"},{"path":"https://jemus42.github.io/tRakt/articles/show-analysis-24.html","id":"step-4-graph","dir":"Articles","previous_headings":"","what":"Step 4: Graph!","title":"Show Analysis: 24","text":"Now episode data tidy form, might well look .","code":"library(ggplot2)  ggplot(data = episodes, aes(x = episode, y = rating, color = votes)) +   geom_point(size = 3, alpha = 2 / 3) +   facet_wrap(~season, nrow = 1, scales = \"free_x\") +   scale_x_continuous(breaks = c(1, 10, 20), expand = c(0, 3)) +   scale_y_continuous(breaks = seq(0, 10, .5), minor_breaks = seq(0, 10, .25), limits = c(7, 9)) +   scale_color_viridis_c() +   guides(color = guide_colorbar(barwidth = unit(6, \"cm\"), title.vjust = .75)) +   labs(     title = \"24: Episode Ratings on trakt.tv\",     subtitle = \"Episode ratings by trakt.tv users by season\",     x = \"Episode Number\", y = \"Rating (1-10)\", color = \"# of Votes\",     caption = \"jemus42.github.io/tRakt\"   ) +   theme_minimal() +   theme(     legend.position = \"bottom\"   )"},{"path":[]},{"path":"https://jemus42.github.io/tRakt/articles/tRakt.html","id":"find-things","dir":"Articles","previous_headings":"","what":"1. Find things","title":"Getting Started","text":"Using text query: Search explicit ID: via whatever’s popular(ish): Another scenario ’re necessarily interested specific media item, rather collection items fulfill certain criteria, like popular trakt.tv maybe specific period genre whatnot. can also filter search_query criteria, ’s maybe useful filter, let’s say, watched movies past week release year movie. 5 popular shows: 10 watched (past year) movies 1990-2000:","code":"search_query(\"Game of Thrones\", type = \"show\") #> # A tibble: 1 × 9 #>   type  score title                         year trakt  slug   tvdb  imdb  tmdb  #>   <chr> <dbl> <chr>                        <int> <chr>  <chr>  <chr> <chr> <chr> #> 1 show  1254. Game of Throws: Inside Darts  2024 265754 game-… 4569… tt34… 2430… search_id(\"121361\", id_type = \"tvdb\", type = \"show\") #> # A tibble: 1 × 9 #>   type  score title            year trakt slug            tvdb   imdb      tmdb  #>   <chr> <dbl> <chr>           <int> <chr> <chr>           <chr>  <chr>     <chr> #> 1 show   1000 Game of Thrones  2011 1390  game-of-thrones 121361 tt0944947 1399 shows_popular(limit = 5) #> # A tibble: 5 × 7 #>   title                year trakt  slug                tvdb   imdb      tmdb  #>   <chr>               <int> <chr>  <chr>               <chr>  <chr>     <chr> #> 1 Game of Thrones      2011 1390   game-of-thrones     121361 tt0944947 1399  #> 2 Breaking Bad         2008 1388   breaking-bad        81189  tt0903747 1396  #> 3 The Walking Dead     2010 1393   the-walking-dead    153021 tt1520211 1402  #> 4 The Big Bang Theory  2007 1409   the-big-bang-theory 80379  tt0898266 1418  #> 5 Stranger Things      2016 104439 stranger-things     305288 tt4574334 66732 library(dplyr)  movies_watched(period = \"yearly\", years = c(1990, 2000)) %>%   select(watcher_count, title, year) #> # A tibble: 10 × 3 #>    watcher_count title                     year #>            <int> <chr>                    <int> #>  1           996 The Matrix                1999 #>  2           681 Fight Club                1999 #>  3           585 Toy Story                 1995 #>  4           581 Forrest Gump              1994 #>  5           568 Gladiator                 2000 #>  6           566 The Shawshank Redemption  1994 #>  7           558 Pulp Fiction              1994 #>  8           515 The Lion King             1994 #>  9           504 The Truman Show           1998 #> 10           486 Jurassic Park             1993"},{"path":"https://jemus42.github.io/tRakt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Burk. Author, maintainer.","code":""},{"path":"https://jemus42.github.io/tRakt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burk L (2025). tRakt: Get Data 'trakt.tv'. R package version 0.16.9000, https://github.com/jemus42/tRakt, https://jemus42.github.io/tRakt.","code":"@Manual{,   title = {tRakt: Get Data from 'trakt.tv'},   author = {Lukas Burk},   year = {2025},   note = {R package version 0.16.9000, https://github.com/jemus42/tRakt},   url = {https://jemus42.github.io/tRakt}, }"},{"path":"https://jemus42.github.io/tRakt/index.html","id":"trakt-","dir":"","previous_headings":"","what":"Get movie and tv data from trakt.tv","title":"Get movie and tv data from trakt.tv","text":"tRakt helps retrieve data trakt.tv, site similar IMDb wider focus, yet smaller user base. site also enables media-center integration, can automatically sync collection watch progress, well scrobble playback ratings via Plex, Kodi likes. , importantly, trakt.tv publicly available API – makes package possible allows collect nice data people contributed. Please note package basically API-client, little opinionated might deliver results exactly match data delivered API. primary motivation package retrieve data easily processable data analysis display, tries hard coerce data tabular form instead using nested lists, direct translation API results look like.","code":""},{"path":"https://jemus42.github.io/tRakt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get movie and tv data from trakt.tv","text":"Get GitHub:","code":"if (!(\"remotes\" %in% installed.packages())) {   install.packages(\"remotes\") } remotes::install_github(\"jemus42/tRakt\")  library(\"tRakt\")"},{"path":"https://jemus42.github.io/tRakt/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Get movie and tv data from trakt.tv","text":"Search show, get basic info: Get season information show using trakt ID: Get episode data first season, time using show’s URL slug: cann also get episode data seasons, note episodes included list-column need unpacking: alternatively, get trending shows: Maybe just want know long take binge shows: Please note though episode runtime data may inaccurate. experience, recent shows fairly accurate runtime data, often case older shows.","code":"library(dplyr) # for convenience library(tRakt) show_info <- search_query(\"Utopia\", type = \"show\") glimpse(show_info) #> Rows: 1 #> Columns: 9 #> $ type  <chr> \"show\" #> $ score <dbl> 1000 #> $ title <chr> \"Utopia\" #> $ year  <int> 2013 #> $ trakt <chr> \"46241\" #> $ slug  <chr> \"utopia\" #> $ tvdb  <chr> \"264991\" #> $ imdb  <chr> \"tt2384811\" #> $ tmdb  <chr> \"46511\" seasons_summary(show_info$trakt, extended = \"full\") |>   glimpse() #> Rows: 2 #> Columns: 13 #> $ season         <int> 1, 2 #> $ rating         <dbl> 8.56154, 8.01047 #> $ votes          <int> 260, 191 #> $ episode_count  <int> 6, 6 #> $ aired_episodes <int> 6, 6 #> $ title          <chr> \"Season 1\", \"Season 2\" #> $ overview       <chr> \"When a group of strangers find themselves in possessio… #> $ first_aired    <dttm> 2013-01-15 21:00:00, 2014-07-14 20:00:00 #> $ updated_at     <dttm> 2022-08-28 14:32:07, 2022-08-28 14:31:03 #> $ network        <chr> \"Channel 4\", \"Channel 4\" #> $ trakt          <chr> \"56008\", \"56009\" #> $ tvdb           <chr> \"507598\", \"524149\" #> $ tmdb           <chr> \"54695\", \"54696\" seasons_season(\"utopia\", seasons = 1, extended = \"full\") |>   glimpse() #> Rows: 6 #> Columns: 16 #> $ season                 <int> 1, 1, 1, 1, 1, 1 #> $ episode                <int> 1, 2, 3, 4, 5, 6 #> $ title                  <chr> \"Episode 1\", \"Episode 2\", \"Episode 3\", \"Episode… #> $ episode_abs            <int> 1, 2, 3, 4, 5, 6 #> $ overview               <chr> \"When  five strangers from an online comic book… #> $ rating                 <dbl> 8.19613, 8.07093, 8.07795, 8.05150, 8.21902, 8.… #> $ votes                  <int> 1239, 1001, 898, 835, 799, 825 #> $ comment_count          <int> 7, 0, 1, 1, 1, 1 #> $ first_aired            <dttm> 2013-01-15 21:00:00, 2013-01-22 21:00:00, 2013-… #> $ updated_at             <dttm> 2022-08-28 12:29:01, 2022-08-28 07:29:46, 2022-… #> $ available_translations <list> <\"de\", \"en\", \"es\", \"fr\", \"he\", \"nl\", \"pl\", \"ru\"… #> $ runtime                <int> 50, 50, 50, 50, 50, 50 #> $ trakt                  <chr> \"1405053\", \"1405054\", \"1405055\", \"1405056\", \"14… #> $ tvdb                   <chr> \"4471351\", \"4477746\", \"4477747\", \"4477748\", \"44… #> $ imdb                   <chr> \"tt2618234\", \"tt2618232\", \"tt2618236\", \"tt2618… #> $ tmdb                   <chr> \"910003\", \"910004\", \"910005\", \"910006\", \"91000… seasons_summary(\"utopia\", episodes = TRUE, extended = \"full\") |>   pull(episodes) |>   bind_rows() |>   glimpse() #> Rows: 12 #> Columns: 16 #> $ season                 <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2 #> $ episode                <int> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6 #> $ title                  <chr> \"Episode 1\", \"Episode 2\", \"Episode 3\", \"Episode… #> $ episode_abs            <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 #> $ overview               <chr> \"When  five strangers from an online comic book… #> $ rating                 <dbl> 8.19613, 8.07093, 8.07795, 8.05150, 8.21902, 8.… #> $ votes                  <int> 1239, 1001, 898, 835, 799, 825, 822, 723, 692, … #> $ comment_count          <int> 7, 0, 1, 1, 1, 1, 3, 1, 1, 1, 2, 4 #> $ first_aired            <dttm> 2013-01-15 21:00:00, 2013-01-22 21:00:00, 2013-… #> $ updated_at             <dttm> 2022-08-28 12:29:01, 2022-08-28 07:29:46, 2022-… #> $ available_translations <list> <\"de\", \"en\", \"es\", \"fr\", \"he\", \"nl\", \"pl\", \"ru\"… #> $ runtime                <int> 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 #> $ trakt                  <chr> \"1405053\", \"1405054\", \"1405055\", \"1405056\", \"14… #> $ tvdb                   <chr> \"4471351\", \"4477746\", \"4477747\", \"4477748\", \"4… #> $ imdb                   <chr> \"tt2618234\", \"tt2618232\", \"tt2618236\", \"tt2618… #> $ tmdb                   <chr> \"910003\", \"910004\", \"910005\", \"910006\", \"91000… shows_trending() #> # A tibble: 10 × 8 #>    watchers title                         year trakt  slug     tvdb  imdb  tmdb  #>       <int> <chr>                        <int> <chr>  <chr>    <chr> <chr> <chr> #>  1       47 Better Call Saul              2015 59660  better-… 2731… tt30… 60059 #>  2       41 Game of Thrones               2011 1390   game-of… 1213… tt09… 1399  #>  3       40 The Sandman                   2022 149786 the-san… 3662… tt17… 90802 #>  4       31 House of the Dragon           2022 154574 house-o… 3715… tt11… 94997 #>  5       30 Breaking Bad                  2008 1388   breakin… 81189 tt09… 1396  #>  6       28 See                           2019 145781 see      3615… tt79… 80752 #>  7       27 Westworld                     2016 99718  westwor… 2967… tt04… 63247 #>  8       22 She-Hulk: Attorney at Law     2022 151854 she-hul… 3686… tt10… 92783 #>  9       21 The Orville                   2017 119017 the-orv… 3284… tt56… 71738 #> 10       21 Only Murders in the Building  2021 165314 only-mu… 3999… tt12… 1071… shows_trending(extended = \"full\") |>   transmute(     show = glue::glue(\"{title} ({year})\"),     runtime_hms = hms::hms(minutes = runtime),     aired_episodes = aired_episodes,     runtime_aired = hms::hms(minutes = runtime * aired_episodes)   ) |>   knitr::kable(     col.names = c(\"Show\", \"Episode Runtime\", \"Aired Episodes\", \"Total Runtime (aired)\")   )"},{"path":"https://jemus42.github.io/tRakt/index.html","id":"credentials","dir":"","previous_headings":"","what":"Credentials","title":"Get movie and tv data from trakt.tv","text":"API requires least client id API calls. Loading package (calling functions via tRakt:: wil automatically set app’s client id (see trakt_credentials()) – extended use set credentials via environment variables .Renviron like : trakt_client_id Required. ’s used HTTP headers API calls, kind biggie. trakt_client_secret: Optional(ish). required intend make authenticated request, required small number implemented API methods] (see vignette(\"Implemented-API-methods\")). can use package perfectly fine basic data collection without registering application trakt.tv. trakt_username Optional. functions retrieve user’s watched shows stats, just sets default value don’t keep supplying individual function calls ’re just looking data anyway. get credentials, (approved) app trakt.tv. theoretically never need supply credentials. However, want actually use package project, recommend relying credentials. make sad panda. now, trakt.tv API rate-limiting, ’s guaranteed stay like future. nice servers.","code":"# tRakt trakt_client_id=12fc1de7[...]3d629afdf2 trakt_client_secret=justabunchofstuffhere trakt_username=jemus42"},{"path":"https://jemus42.github.io/tRakt/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Get movie and tv data from trakt.tv","text":"Please note tRakt project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/anticipated_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Anticipated media — anticipated_media","title":"Anticipated media — anticipated_media","text":"functions return anticipated movies/shows trakt.tv.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/anticipated_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anticipated media — anticipated_media","text":"","code":"movies_anticipated(   limit = 10,   extended = c(\"min\", \"full\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL )  shows_anticipated(   limit = 10,   extended = c(\"min\", \"full\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL,   networks = NULL,   status = NULL )"},{"path":"https://jemus42.github.io/tRakt/reference/anticipated_media.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Anticipated media — anticipated_media","text":"movies_anticipated() wraps endpoint movies/anticipated. shows_anticipated() wraps endpoint shows/anticipated.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/anticipated_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anticipated media — anticipated_media","text":"limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. query character(1): Search string titles descriptions. search_query() fields searched depending type media. See API docs full reference. years character | integer: 4-digit year (2010) range, e.g. \"2010-2020\". Can also integer vector length two coerced appropriately, e.g. c(2010, 2020). genres character(n): Genre  slug(s). See trakt_genres table genres. Multiple values allowed concatenated. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). countries character(n): Two-letter country code(s). See trakt_countries. runtimes character | integer: Integer range minutes, e.g. 30-90. Can also integer vector length two coerced appropriately. ratings character | integer:  Integer range 0 100. Can also integer vector length two coerced appropriately. Note user-supplied ratings range 1 10, yet ratings site scaled range 1 100. certifications character(n): Certification(s) like pg-13. Multiple values allowed. Use trakt_certifications reference. Note different certifications shows movies. networks character(n): (Shows ) Network name like HBO. See trakt_networks list known networks. status character(n): (Shows ) status shows. One \"returning series\", \"production\", \"planned\", \"canceled\", \"ended\".","code":""},{"path":"https://jemus42.github.io/tRakt/reference/anticipated_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anticipated media — anticipated_media","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/anticipated_media.html","id":"the-dynamic-lists-on-trakt-tv","dir":"Reference","previous_headings":"","what":"The Dynamic Lists on trakt.tv","title":"Anticipated media — anticipated_media","text":"functions access automatically updated lists provided trakt.tv. function comes two flavors: Shows movies. following descriptions adapted directly API reference. Popular: Popularity calculated using rating percentage number ratings. Trending: Returns movies/shows watched right now. Movies/shows users returned first. Played: Returns played (single user can watch multiple times) movies/shows specified time period. Watched: Returns watched (unique users) movies/shows specified time period. Collected: Returns collected (unique users) movies/shows specified time period. Anticipated: Returns anticipated movies/shows based number lists movie/show appears . functions Played, Watched, Collected Played return additional variables besides media information: watcher_count, play_count, collected_count, collector_count.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/anticipated_media.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anticipated media — anticipated_media","text":"","code":"if (FALSE) { # \\dontrun{ # Get 15 the most anticipated upcoming shows on Netflix that air this year current_year <- format(Sys.Date(), \"%Y\") shows_anticipated(limit = 15, networks = \"Netflix\", years = current_year) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/apidoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get API docs keys — apidoc","title":"Get API docs keys — apidoc","text":"Get API docs keys","code":""},{"path":"https://jemus42.github.io/tRakt/reference/apidoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get API docs keys — apidoc","text":"","code":"apidoc(section, method, key)"},{"path":"https://jemus42.github.io/tRakt/reference/apidoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get API docs keys — apidoc","text":"section E.g. \"movies\" method E.g \"summary\" key E.g. \"url\", \"endpoint\"","code":""},{"path":"https://jemus42.github.io/tRakt/reference/apidoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get API docs keys — apidoc","text":"character(1)","code":""},{"path":"https://jemus42.github.io/tRakt/reference/apiurl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a formatted API url for an endpoint — apiurl","title":"Get a formatted API url for an endpoint — apiurl","text":"Get formatted API url endpoint","code":""},{"path":"https://jemus42.github.io/tRakt/reference/apiurl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a formatted API url for an endpoint — apiurl","text":"","code":"apiurl(section, method, prefix = \"@source \")"},{"path":"https://jemus42.github.io/tRakt/reference/apiurl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a formatted API url for an endpoint — apiurl","text":"section E.g. \"movies\" method E.g. \"summary\"","code":""},{"path":"https://jemus42.github.io/tRakt/reference/apiurl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a formatted API url for an endpoint — apiurl","text":"Markdown-formatted url","code":""},{"path":"https://jemus42.github.io/tRakt/reference/build_trakt_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble a trakt.tv API URL — build_trakt_url","title":"Assemble a trakt.tv API URL — build_trakt_url","text":"build_trakt_url assembles trakt.tv API URL different arguments. result fine use trakt_get, since function created .","code":""},{"path":"https://jemus42.github.io/tRakt/reference/build_trakt_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble a trakt.tv API URL — build_trakt_url","text":"","code":"build_trakt_url(..., validate = FALSE)"},{"path":"https://jemus42.github.io/tRakt/reference/build_trakt_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble a trakt.tv API URL — build_trakt_url","text":"... Unnamed arguments concatenated / separators form path API URL, e.g. arguments movies, tron-legacy-2012 releases concatenated movies/tron-legacy-2012/releases. Additional named arguments used query parameters, usually extended = \"full\" others. validate logical(1) [TRUE]: Whether check URL via httr::HEAD request.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/build_trakt_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble a trakt.tv API URL — build_trakt_url","text":"URL: character length 1. validate = TRUE, also message including HTTP status code return HEAD request.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/build_trakt_url.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Assemble a trakt.tv API URL — build_trakt_url","text":"Please aware result function verified working trakt.tv API URL unless validate = TRUE, case HEAD request performed actually receive data, returned status code validity URL can inferred.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/build_trakt_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble a trakt.tv API URL — build_trakt_url","text":"","code":"build_trakt_url(\"shows\", \"breaking-bad\", extended = \"full\") #> [1] \"https://api.trakt.tv/shows/breaking-bad?extended=full\" build_trakt_url(\"shows\", \"popular\", page = 3, limit = 5) #> [1] \"https://api.trakt.tv/shows/popular?page=3&limit=5\"  # Path can also be partially assembled already build_trakt_url(\"users/jemus42\", \"ratings\") #> [1] \"https://api.trakt.tv/users/jemus42/ratings\"  # Validate a URL works build_trakt_url(\"shows\", \"popular\", page = 1, limit = 5, validate = TRUE) #> [1] \"https://api.trakt.tv/shows/popular?page=1&limit=5\""},{"path":"https://jemus42.github.io/tRakt/reference/check_username.html","id":null,"dir":"Reference","previous_headings":"","what":"Check username — check_username","title":"Check username — check_username","text":"Check username","code":""},{"path":"https://jemus42.github.io/tRakt/reference/check_username.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check username — check_username","text":"","code":"check_username(user, validate = FALSE)"},{"path":"https://jemus42.github.io/tRakt/reference/check_username.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check username — check_username","text":"user username input. validate logical(1) [TRUE]: Retrieve user profile check exists.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/check_username.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check username — check_username","text":"error checks fail else TRUE invisibly. validate, user profile returned list.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/collected_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Most collected media — collected_media","title":"Most collected media — collected_media","text":"functions return collected movies/shows trakt.tv.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/collected_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Most collected media — collected_media","text":"","code":"movies_collected(   limit = 10,   extended = c(\"min\", \"full\"),   period = c(\"weekly\", \"monthly\", \"yearly\", \"all\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL )  shows_collected(   limit = 10,   extended = c(\"min\", \"full\"),   period = c(\"weekly\", \"monthly\", \"yearly\", \"all\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL,   networks = NULL,   status = NULL )"},{"path":"https://jemus42.github.io/tRakt/reference/collected_media.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Most collected media — collected_media","text":"movies_collected() wraps endpoint movies/collected/:period. shows_collected() wraps endpoint shows/collected/:period.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/collected_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Most collected media — collected_media","text":"limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. period character(1) [\"weekly\"]: period filter . Possible values \"weekly\", \"monthly\", \"yearly\", \"\". query character(1): Search string titles descriptions. search_query() fields searched depending type media. See API docs full reference. years character | integer: 4-digit year (2010) range, e.g. \"2010-2020\". Can also integer vector length two coerced appropriately, e.g. c(2010, 2020). genres character(n): Genre  slug(s). See trakt_genres table genres. Multiple values allowed concatenated. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). countries character(n): Two-letter country code(s). See trakt_countries. runtimes character | integer: Integer range minutes, e.g. 30-90. Can also integer vector length two coerced appropriately. ratings character | integer:  Integer range 0 100. Can also integer vector length two coerced appropriately. Note user-supplied ratings range 1 10, yet ratings site scaled range 1 100. certifications character(n): Certification(s) like pg-13. Multiple values allowed. Use trakt_certifications reference. Note different certifications shows movies. networks character(n): (Shows ) Network name like HBO. See trakt_networks list known networks. status character(n): (Shows ) status shows. One \"returning series\", \"production\", \"planned\", \"canceled\", \"ended\".","code":""},{"path":"https://jemus42.github.io/tRakt/reference/collected_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Most collected media — collected_media","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/collected_media.html","id":"the-dynamic-lists-on-trakt-tv","dir":"Reference","previous_headings":"","what":"The Dynamic Lists on trakt.tv","title":"Most collected media — collected_media","text":"functions access automatically updated lists provided trakt.tv. function comes two flavors: Shows movies. following descriptions adapted directly API reference. Popular: Popularity calculated using rating percentage number ratings. Trending: Returns movies/shows watched right now. Movies/shows users returned first. Played: Returns played (single user can watch multiple times) movies/shows specified time period. Watched: Returns watched (unique users) movies/shows specified time period. Collected: Returns collected (unique users) movies/shows specified time period. Anticipated: Returns anticipated movies/shows based number lists movie/show appears . functions Played, Watched, Collected Played return additional variables besides media information: watcher_count, play_count, collected_count, collector_count.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/comments_comment.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single comment — comments_comment","title":"Get a single comment — comments_comment","text":"Get single comment","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_comment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single comment — comments_comment","text":"","code":"comments_comment(id, extended = c(\"min\", \"full\"))  comments_replies(id, extended = c(\"min\", \"full\"))  comments_likes(id, extended = c(\"min\", \"full\"))  comments_item(id, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/comments_comment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a single comment — comments_comment","text":"comments_comment() wraps endpoint comments/:id. comments_replies() wraps endpoint comments/:id/replies. comments_likes() wraps endpoint comments/:id/likes. comments_item() wraps endpoint comments/:id/item.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_comment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single comment — comments_comment","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_comment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single comment — comments_comment","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_comment.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get a single comment — comments_comment","text":"comments_replies(): Get comment's replies comments_likes(): Get users liked comment. comments_item(): Get media item attached comment.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/comments_comment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single comment — comments_comment","text":"","code":"# A single comment comments_comment(\"236397\") #> # A tibble: 1 × 17 #>       id comment                    spoiler review parent_id created_at          #>    <int> <chr>                      <lgl>   <lgl>      <int> <dttm>              #> 1 236397 All the gun inflicted dea… FALSE   FALSE          0 2019-06-09 21:33:00 #> # ℹ 11 more variables: updated_at <dttm>, replies <int>, likes <int>, #> #   user_rating <int>, username <chr>, private <lgl>, deleted <lgl>, #> #   user_name <chr>, vip <lgl>, vip_ep <lgl>, user_slug <chr>  # Multiple comments comments_comment(c(\"236397\", \"112561\")) #> # A tibble: 2 × 17 #>       id comment                    spoiler review parent_id created_at          #>    <int> <chr>                      <lgl>   <lgl>      <int> <dttm>              #> 1 236397 All the gun inflicted dea… FALSE   FALSE          0 2019-06-09 21:33:00 #> 2 112561 Seriously though what the… FALSE   FALSE          0 2017-01-31 17:48:59 #> # ℹ 11 more variables: updated_at <dttm>, replies <int>, likes <int>, #> #   user_rating <int>, username <chr>, private <lgl>, deleted <lgl>, #> #   user_name <chr>, vip <lgl>, vip_ep <lgl>, user_slug <chr> if (FALSE) { # \\dontrun{ comments_replies(\"236397\") } # } if (FALSE) { # \\dontrun{ comments_likes(\"236397\") } # } if (FALSE) { # \\dontrun{ # A movie comments_item(\"236397\") comments_item(\"236397\", extended = \"full\")  # A show comments_item(\"120768\") comments_item(\"120768\", extended = \"full\")  # A season comments_item(\"140265\") comments_item(\"140265\", extended = \"full\")  # An episode comments_item(\"136632\") comments_item(\"136632\", extended = \"full\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/comments_trending.html","id":null,"dir":"Reference","previous_headings":"","what":"Get trending or recently made comments — comments_trending","title":"Get trending or recently made comments — comments_trending","text":"Get trending recently made comments","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_trending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get trending or recently made comments — comments_trending","text":"","code":"comments_trending(   comment_type = c(\"all\", \"reviews\", \"shouts\"),   type = c(\"all\", \"movies\", \"shows\", \"seasons\", \"episodes\", \"lists\"),   include_replies = FALSE,   limit = 10L )  comments_recent(   comment_type = c(\"all\", \"reviews\", \"shouts\"),   type = c(\"all\", \"movies\", \"shows\", \"seasons\", \"episodes\", \"lists\"),   include_replies = FALSE,   limit = 10L )"},{"path":"https://jemus42.github.io/tRakt/reference/comments_trending.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get trending or recently made comments — comments_trending","text":"comments_trending() wraps endpoint comments/trending/:comment_type/:type?include_replies=. comments_recent() wraps endpoint comments/recent/:comment_type/:type?include_replies=.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_trending.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get trending or recently made comments — comments_trending","text":"comment_type character(1) [\"\"]: type comment, one \"\", \"reviews\" \"shouts\". type character(1) [\"\"]: type media filter , one \"\", \"movies\", \"shows\", \"seasons\", \"episodes\" \"lists\". include_replies logical(1) [FALSE]: Whether include replies. limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer().","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_trending.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get trending or recently made comments — comments_trending","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/comments_trending.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get trending or recently made comments — comments_trending","text":"","code":"if (FALSE) { # \\dontrun{ # Trending reviews comments_trending(\"reviews\")  # Recent shouts (short comments) comments_recent(\"shouts\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/comments_updates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get recently updated/edited comments — comments_updates","title":"Get recently updated/edited comments — comments_updates","text":"Get recently updated/edited comments","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_updates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get recently updated/edited comments — comments_updates","text":"","code":"comments_updates(   comment_type = c(\"all\", \"reviews\", \"shouts\"),   type = c(\"all\", \"movies\", \"shows\", \"seasons\", \"episodes\", \"lists\"),   include_replies = FALSE,   limit = 10L )"},{"path":"https://jemus42.github.io/tRakt/reference/comments_updates.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get recently updated/edited comments — comments_updates","text":"comments_updates() wraps endpoint comments/updates/:comment_type/:type?include_replies=.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_updates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get recently updated/edited comments — comments_updates","text":"comment_type character(1) [\"\"]: type comment, one \"\", \"reviews\" \"shouts\". type character(1) [\"\"]: type media filter , one \"\", \"movies\", \"shows\", \"seasons\", \"episodes\" \"lists\". include_replies logical(1) [FALSE]: Whether include replies. limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer().","code":""},{"path":"https://jemus42.github.io/tRakt/reference/comments_updates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get recently updated/edited comments — comments_updates","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/comments_updates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get recently updated/edited comments — comments_updates","text":"","code":"# Recently updated comments comments_updates() #> # A tibble: 10 × 32 #>    type        id comment           spoiler review parent_id created_at          #>    <chr>    <int> <chr>             <lgl>   <lgl>      <int> <dttm>              #>  1 episode 785136 \"I bet this was … FALSE   FALSE          0 2025-03-14 11:01:23 #>  2 episode 785137 \"another banger … TRUE    FALSE          0 2025-03-14 11:06:34 #>  3 episode 761207 \"The worst Trait… FALSE   FALSE          0 2025-01-17 02:01:44 #>  4 episode 784837 \"Mr. Johnson mak… TRUE    FALSE          0 2025-03-13 17:00:24 #>  5 episode 784903 \"- White?\\r\\n- I… FALSE   FALSE          0 2025-03-13 20:45:41 #>  6 episode 784799 \"The callback to… FALSE   FALSE          0 2025-03-13 14:41:45 #>  7 show    449977 \"Absolutely love… FALSE   FALSE          0 2022-03-03 10:06:14 #>  8 show    785135 \"A story told in… FALSE   FALSE          0 2025-03-14 10:57:33 #>  9 show    785134 \"A story told in… FALSE   FALSE          0 2025-03-14 10:57:28 #> 10 movie   780061 \"I still can't b… FALSE   FALSE          0 2025-03-02 08:25:47 #> # ℹ 25 more variables: updated_at <dttm>, replies <int>, likes <int>, #> #   user_rating <int>, username <chr>, private <lgl>, deleted <lgl>, #> #   user_name <chr>, vip <lgl>, vip_ep <lgl>, user_slug <chr>, title <chr>, #> #   year <int>, trakt <chr>, slug <chr>, tvdb <chr>, imdb <chr>, tmdb <chr>, #> #   episode_season <int>, episode_number <int>, episode_title <chr>, #> #   episode_trakt <chr>, episode_tvdb <chr>, episode_imdb <chr>, #> #   episode_tmdb <chr>"},{"path":"https://jemus42.github.io/tRakt/reference/dynamic_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"See which movies / shows are popular across various metrics — dynamic_lists","title":"See which movies / shows are popular across various metrics — dynamic_lists","text":"According API docs, popularity calculated based ratings number ratings (.e., votes). Trending items watched right now, items users currently watching returned first. Anticipation measured number user-created lists items part released yet.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/dynamic_lists.html","id":"the-dynamic-lists-on-trakt-tv","dir":"Reference","previous_headings":"","what":"The Dynamic Lists on trakt.tv","title":"See which movies / shows are popular across various metrics — dynamic_lists","text":"functions access automatically updated lists provided trakt.tv. function comes two flavors: Shows movies. following descriptions adapted directly API reference. Popular: Popularity calculated using rating percentage number ratings. Trending: Returns movies/shows watched right now. Movies/shows users returned first. Played: Returns played (single user can watch multiple times) movies/shows specified time period. Watched: Returns watched (unique users) movies/shows specified time period. Collected: Returns collected (unique users) movies/shows specified time period. Anticipated: Returns anticipated movies/shows based number lists movie/show appears . functions Played, Watched, Collected Played return additional variables besides media information: watcher_count, play_count, collected_count, collector_count.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/episodes_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single episode's details — episodes_summary","title":"Get a single episode's details — episodes_summary","text":"retrieves single episode. See seasons_season whole season, seasons_summary (potentially) episodes show.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/episodes_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single episode's details — episodes_summary","text":"","code":"episodes_summary(id, season = 1L, episode = 1L, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/episodes_summary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a single episode's details — episodes_summary","text":"episodes_summary() wraps endpoint shows/:id/seasons/:season/episodes/:episode.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/episodes_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single episode's details — episodes_summary","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/episodes_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single episode's details — episodes_summary","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/episodes_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single episode's details — episodes_summary","text":"","code":"# Get just this one episode with its ratings, votes, etc. episodes_summary(\"breaking-bad\", season = 1, episode = 1, extended = \"full\") #> # A tibble: 1 × 18 #>   id         season episode title number_abs overview rating votes comment_count #>   <chr>       <int>   <int> <chr>      <int> <chr>     <dbl> <int>         <int> #> 1 breaking-…      1       1 Pilot          1 When an…   8.34  8286            18 #> # ℹ 9 more variables: first_aired <dttm>, updated_at <dttm>, #> #   available_translations <list>, runtime <int>, episode_type <chr>, #> #   trakt <chr>, tvdb <chr>, imdb <chr>, tmdb <chr>"},{"path":"https://jemus42.github.io/tRakt/reference/futurama.html","id":null,"dir":"Reference","previous_headings":"","what":"Futurama episodes — futurama","title":"Futurama episodes — futurama","text":"data comes https://trakt.tv serves example episode data output.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/futurama.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Futurama episodes — futurama","text":"","code":"futurama"},{"path":"https://jemus42.github.io/tRakt/reference/futurama.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Futurama episodes — futurama","text":"tibble() 124 rows 18 variables: episode, season Episode within season season number title Episode title episode_abs Overall episode number overview Episode summary rating Rating (1-10)  trakt.tv votes Number votes ontrakt.tv comment_count Number comments episode page first_aired, updated_at Original air date last update UTC POSIXct runtime Runtime minutes trakt, tvdb, tmdb Episode IDs trakt.tv, TVDb, TMDb available_translations List-column available translation trakt.tv","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/futurama.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Futurama episodes — futurama","text":"","code":"futurama #> # A tibble: 124 × 16 #>    season episode title          episode_abs overview rating votes comment_count #>     <int>   <int> <chr>                <int> <chr>     <dbl> <int>         <int> #>  1      1       1 Space Pilot 3…           1 \"On New…   8.12  2269             3 #>  2      1       2 The Series Ha…           2 \"For th…   7.84  1847             3 #>  3      1       3 I, Roommate              3 \"When i…   7.86  1666             0 #>  4      1       4 Love's Labour…           4 \"On a m…   7.74  1519             4 #>  5      1       5 Fear of a Bot…           5 \"Fry an…   7.69  1457             1 #>  6      1       6 A Fishful of …           6 \"Fry di…   7.77  1443             1 #>  7      1       7 My Three Suns            7 \"Delive…   7.66  1317             0 #>  8      1       8 A Big Piece o…           8 \"A big …   7.77  1297             0 #>  9      1       9 Hell Is Other…           9 \"During…   7.86  1293             2 #> 10      2       1 A Flight to R…          10 \"The Pl…   7.82  1342             1 #> # ℹ 114 more rows #> # ℹ 8 more variables: first_aired <dttm>, updated_at <dttm>, #> #   available_translations <list>, runtime <int>, trakt <chr>, tvdb <chr>, #> #   imdb <chr>, tmdb <chr>"},{"path":"https://jemus42.github.io/tRakt/reference/gameofthrones.html","id":null,"dir":"Reference","previous_headings":"","what":"Game of Thrones episodes — gameofthrones","title":"Game of Thrones episodes — gameofthrones","text":"data comes https://trakt.tv https://en.wikipedia.org/wiki/List_of_Game_of_Thrones_episodes.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/gameofthrones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Game of Thrones episodes — gameofthrones","text":"","code":"gameofthrones"},{"path":"https://jemus42.github.io/tRakt/reference/gameofthrones.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Game of Thrones episodes — gameofthrones","text":"tibble() 67 rows 17 variables: episode_abs Overall episode number episode, season Episode within season season number title Episode title overview Episode summary rating Rating (1-10)  trakt.tv votes Number votes ontrakt.tv viewers Viewers according Wikipedia director, writer Directing writing credits comment_count Number comments episode page first_aired, updated_at Original air date last update UTC POSIXct runtime Runtime minutes trakt, tvdb, tmdb Episode IDs trakt.tv, TVDb, TMDb year Year first airing epid Episode ID s00e00 format","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/gameofthrones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Game of Thrones episodes — gameofthrones","text":"","code":"gameofthrones #> # A tibble: 73 × 18 #>    episode_abs episode season runtime title        overview rating votes viewers #>          <int>   <int>  <int>   <int> <chr>        <chr>     <dbl> <int>   <dbl> #>  1           1       1      1      62 Winter Is C… Jon Arr…   8.08 14151    2.22 #>  2           2       2      1      55 The Kingsro… While B…   8.10 11101    2.2  #>  3           3       3      1      57 Lord Snow    Lord St…   8.02 10195    2.44 #>  4           4       4      1      55 Cripples, B… Eddard …   8.06  9791    2.45 #>  5           5       5      1      54 The Wolf an… Catelyn…   8.10  9448    2.58 #>  6           6       6      1      53 A Golden Cr… While r…   8.29  9438    2.44 #>  7           7       7      1      58 You Win or … Robert …   8.26  9256    2.4  #>  8           8       8      1      58 The Pointy … Eddard …   8.12  8955    2.72 #>  9           9       9      1      56 Baelor       Robb go…   8.36  8985    2.66 #> 10          10      10      1      53 Fire and Bl… With Ne…   8.56  9077    3.04 #> # ℹ 63 more rows #> # ℹ 9 more variables: director <chr>, writer <chr>, first_aired <dttm>, #> #   comment_count <int>, trakt <chr>, imdb <chr>, tvdb <chr>, tmdb <chr>, #> #   updated_at <dttm>"},{"path":"https://jemus42.github.io/tRakt/reference/lists_popular.html","id":null,"dir":"Reference","previous_headings":"","what":"Get popular / trending lists — lists_popular","title":"Get popular / trending lists — lists_popular","text":"Get popular / trending lists","code":""},{"path":"https://jemus42.github.io/tRakt/reference/lists_popular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get popular / trending lists — lists_popular","text":"","code":"lists_popular(limit = 10)  lists_trending(limit = 10)"},{"path":"https://jemus42.github.io/tRakt/reference/lists_popular.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get popular / trending lists — lists_popular","text":"lists_popular() wraps endpoint lists/popular. lists_trending() wraps endpoint lists/trending.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/lists_popular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get popular / trending lists — lists_popular","text":"limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer().","code":""},{"path":"https://jemus42.github.io/tRakt/reference/lists_popular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get popular / trending lists — lists_popular","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/lists_popular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get popular / trending lists — lists_popular","text":"","code":"if (FALSE) { # \\dontrun{ lists_popular() lists_trending() } # }"},{"path":"https://jemus42.github.io/tRakt/reference/media_aliases.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all movie / show aliases — media_aliases","title":"Get all movie / show aliases — media_aliases","text":"Get movie / show aliases","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_aliases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all movie / show aliases — media_aliases","text":"","code":"movies_aliases(id)  shows_aliases(id)"},{"path":"https://jemus42.github.io/tRakt/reference/media_aliases.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get all movie / show aliases — media_aliases","text":"movies_aliases() wraps endpoint movies/:id/aliases. shows_aliases() wraps endpoint shows/:id/aliases.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_aliases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all movie / show aliases — media_aliases","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_aliases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all movie / show aliases — media_aliases","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/media_aliases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all movie / show aliases — media_aliases","text":"","code":"movies_aliases(190430) #> # A tibble: 30 × 2 #>    title                   country #>    <chr>                   <chr>   #>  1 X-Men Origins: Deadpool us      #>  2 X-Men: Deadpool         us      #>  3 Deadpool                br      #>  4 Дедпул                  bg      #>  5 Dedpul                  rs      #>  6 Дэдпул                  ru      #>  7 惡棍英雄：死侍          tw      #>  8 死侍：不死现身          cn      #>  9 X战警：死侍             cn      #> 10 Deadpool 1              us      #> # ℹ 20 more rows shows_aliases(104439) #> # A tibble: 710 × 2 #>    title                   country #>    <chr>                   <chr>   #>  1 Очень странные дела     us      #>  2 Странные вещи           us      #>  3 Загадкові справи        ua      #>  4 Keisti dalykai          lt      #>  5 Крайне странные события ru      #>  6 უცნაური საქმეები        ge      #>  7 Stranger Things (2016)  cn      #>  8 Stranger Things         cn      #>  9 Странные вещи           ru      #> 10 Крайне странные события ru      #> # ℹ 700 more rows"},{"path":"https://jemus42.github.io/tRakt/reference/media_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all comments of a thing — media_comments","title":"Get all comments of a thing — media_comments","text":"Get comments thing","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all comments of a thing — media_comments","text":"","code":"movies_comments(   id,   sort = c(\"newest\", \"oldest\", \"likes\", \"replies\"),   extended = c(\"min\", \"full\"),   limit = 10L )  shows_comments(   id,   sort = c(\"newest\", \"oldest\", \"likes\", \"replies\"),   extended = c(\"min\", \"full\"),   limit = 10L )  seasons_comments(   id,   season = 1L,   sort = c(\"newest\", \"oldest\", \"likes\", \"replies\"),   extended = c(\"min\", \"full\"),   limit = 10L )  episodes_comments(   id,   season = 1L,   episode = 1L,   sort = c(\"newest\", \"oldest\", \"likes\", \"replies\"),   extended = c(\"min\", \"full\"),   limit = 10L )"},{"path":"https://jemus42.github.io/tRakt/reference/media_comments.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get all comments of a thing — media_comments","text":"movies_comments() wraps endpoint movies/:id/comments/:sort. shows_comments() wraps endpoint shows/:id/comments/:sort. seasons_comments() wraps endpoint shows/:id/seasons/:season/comments/:sort. episodes_comments() wraps endpoint shows/:id/seasons/:season/episodes/:episode/comments/:sort.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all comments of a thing — media_comments","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. sort character(1) [\"newest\"]: Comment sort order, one \"newest\", \"oldest\", \"likes\" \"replies\". extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all comments of a thing — media_comments","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_comments.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get all comments of a thing — media_comments","text":"movies_comments(): Get comments movie shows_comments(): Get comments movie seasons_comments(): Get comments season episodes_comments(): Get comments episode","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/media_comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all comments of a thing — media_comments","text":"","code":"if (FALSE) { # \\dontrun{ movies_comments(193972) shows_comments(46241, sort = \"likes\") seasons_comments(46241, season = 1, sort = \"likes\") episodes_comments(46241, season = 1, episode = 2, sort = \"likes\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/media_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lists containing a movie, show, season, episode or person — media_lists","title":"Get lists containing a movie, show, season, episode or person — media_lists","text":"Get lists containing movie, show, season, episode person","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lists containing a movie, show, season, episode or person — media_lists","text":"","code":"movies_lists(   id,   type = c(\"all\", \"personal\", \"official\", \"watchlists\"),   sort = c(\"popular\", \"likes\", \"comments\", \"items\", \"added\", \"updated\"),   limit = 10L,   extended = c(\"min\", \"full\") )  shows_lists(   id,   type = c(\"all\", \"personal\", \"official\", \"watchlists\"),   sort = c(\"popular\", \"likes\", \"comments\", \"items\", \"added\", \"updated\"),   limit = 10L,   extended = c(\"min\", \"full\") )  seasons_lists(   id,   season,   type = c(\"all\", \"personal\", \"official\", \"watchlists\"),   sort = c(\"popular\", \"likes\", \"comments\", \"items\", \"added\", \"updated\"),   limit = 10L,   extended = c(\"min\", \"full\") )  episodes_lists(   id,   season,   episode,   type = c(\"all\", \"personal\", \"official\", \"watchlists\"),   sort = c(\"popular\", \"likes\", \"comments\", \"items\", \"added\", \"updated\"),   limit = 10L,   extended = c(\"min\", \"full\") )  people_lists(   id,   type = c(\"all\", \"personal\", \"official\", \"watchlists\"),   sort = c(\"popular\", \"likes\", \"comments\", \"items\", \"added\", \"updated\"),   limit = 10L,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/media_lists.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get lists containing a movie, show, season, episode or person — media_lists","text":"movies_lists() wraps endpoint movies/:id/lists/:type/:sort. shows_lists() wraps endpoint shows/:id/lists/:type/:sort. seasons_lists() wraps endpoint shows/:id/seasons/:season/lists/:type/:sort. episodes_lists() wraps endpoint shows/:id/seasons/:season/episodes/:episode/lists/:type/:sort.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lists containing a movie, show, season, episode or person — media_lists","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. type character(1) [\"\"]: type list, one \"\", \"personal\", \"official\" \"watchlists\". sort character(1) [\"popular\"]: Sort lists one \"popular\", \"likes\", \"comments\", \"items\", \"added\" \"updated\". limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lists containing a movie, show, season, episode or person — media_lists","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_lists.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get lists containing a movie, show, season, episode or person — media_lists","text":"movies_lists(): Lists containing movie. shows_lists(): Lists containing show. seasons_lists(): Lists containing season. episodes_lists(): Lists containing episode. people_lists(): Lists containing person.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/media_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lists containing a movie, show, season, episode or person — media_lists","text":"","code":"if (FALSE) { # \\dontrun{ movies_lists(\"190430\", type = \"personal\", limit = 5) } # } if (FALSE) { # \\dontrun{ shows_lists(\"46241\") } # } if (FALSE) { # \\dontrun{ seasons_lists(\"46241\", season = 1) } # } if (FALSE) { # \\dontrun{ episodes_lists(\"46241\", season = 1, episode = 1) } # } if (FALSE) { # \\dontrun{ people_lists(\"david-tennant\")  people_lists(\"emilia-clarke\", sort = \"items\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/media_people.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cast and crew of a show or movie — media_people","title":"Get the cast and crew of a show or movie — media_people","text":"Returns cast crew show/movie, depending much data available.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_people.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cast and crew of a show or movie — media_people","text":"","code":"movies_people(id, extended = c(\"min\", \"full\"))  shows_people(id, guest_stars = FALSE, extended = c(\"min\", \"full\"))  seasons_people(   id,   season = 1L,   guest_stars = FALSE,   extended = c(\"min\", \"full\") )  episodes_people(   id,   season = 1L,   episode = 1L,   guest_stars = FALSE,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/media_people.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get the cast and crew of a show or movie — media_people","text":"movies_people() wraps endpoint movies/:id/people. shows_people() wraps endpoint shows/:id/people. seasons_people() wraps endpoint shows/:id/seasons/:season/people. episodes_people() wraps endpoint shows/:id/seasons/:season/episodes/:episode/people.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_people.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cast and crew of a show or movie — media_people","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. guest_stars logical(1) [\"FALSE\"]: Also include guest stars. returns lot data, use care. season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_people.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cast and crew of a show or movie — media_people","text":"list one tibbles cast /crew. latter tibble objects flat possible.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_people.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get the cast and crew of a show or movie — media_people","text":"2019-09-30, two representations character[s] job[s]: One regular character variable, list-column. former deprecated included compatibility reasons.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/media_people.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cast and crew of a show or movie — media_people","text":"","code":"if (FALSE) { # \\dontrun{ movies_people(\"deadpool-2016\") shows_people(\"breaking-bad\") seasons_people(\"breaking-bad\", season = 1) episodes_people(\"breaking-bad\", season = 1, episode = 1) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/media_ratings.html","id":null,"dir":"Reference","previous_headings":"","what":"Media user ratings — media_ratings","title":"Media user ratings — media_ratings","text":"Returns movie's show's (season's, episode's) rating ratings distribution. want full ratings distribution, highly advised just use *_summary functions seasons_season episode ratings.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_ratings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Media user ratings — media_ratings","text":"","code":"shows_ratings(id)  movies_ratings(id)  seasons_ratings(id, season = 1L)  episodes_ratings(id, season = 1L, episode = 1L)"},{"path":"https://jemus42.github.io/tRakt/reference/media_ratings.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Media user ratings — media_ratings","text":"shows_ratings() wraps endpoint shows/:ids/ratings. movies_ratings() wraps endpoint movies/:id/ratings. seasons_ratings() wraps endpoint shows/:id/seasons/:season/ratings. episodes_ratings() wraps endpoint shows/:id/seasons/:season/episodes/:episode/ratings.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_ratings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Media user ratings — media_ratings","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_ratings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Media user ratings — media_ratings","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_ratings.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Media user ratings — media_ratings","text":"Since function able work multi-length inputs id, season episode, possible get lot data, cost one API call per element argument. Please kind API.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/media_ratings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Media user ratings — media_ratings","text":"","code":"# A movie's ratings movies_ratings(\"tron-legacy-2010\") #> # A tibble: 1 × 5 #>   rating votes distribution      id               type   #>    <dbl> <int> <list>            <chr>            <chr>  #> 1   7.17 17999 <tibble [10 × 2]> tron-legacy-2010 movies  # A show's ratings shows_ratings(\"game-of-thrones\") #> # A tibble: 1 × 5 #>   rating  votes distribution      id              type  #>    <dbl>  <int> <list>            <chr>           <chr> #> 1   8.91 141109 <tibble [10 × 2]> game-of-thrones shows if (FALSE) { # \\dontrun{ # Ratings for seasons 1 through 5 seasons_ratings(\"futurama\", season = 1:5)  # Ratings for episodes 1 through 7 of season 1 episodes_ratings(\"futurama\", season = 1, episode = 1:7) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/media_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a show or movie's (or season's or episode's) stats — media_stats","title":"Get a show or movie's (or season's or episode's) stats — media_stats","text":"data contains watchers, playes, collectors, comments, lists, votes.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a show or movie's (or season's or episode's) stats — media_stats","text":"","code":"shows_stats(id)  movies_stats(id)  seasons_stats(id, season = 1L)  episodes_stats(id, season = 1L, episode = 1L)"},{"path":"https://jemus42.github.io/tRakt/reference/media_stats.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a show or movie's (or season's or episode's) stats — media_stats","text":"shows_stats() wraps endpoint shows/:id/stats. movies_stats() wraps endpoint movies/:id/stats. seasons_stats() wraps endpoint shows/:id/seasons/:season/stats. episodes_stats() wraps endpoint shows/:id/seasons/:season/episodes/:episode/stats.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a show or movie's (or season's or episode's) stats — media_stats","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a show or movie's (or season's or episode's) stats — media_stats","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/media_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a show or movie's (or season's or episode's) stats — media_stats","text":"","code":"# Stats for a movie movies_stats(\"inception-2010\") #> # A tibble: 1 × 10 #>   watchers  plays collectors comments lists votes favorited recommended type   #>      <int>  <int>      <int>    <int> <int> <int>     <int>       <int> <chr>  #> 1   267836 310128     452004      181 84231 79603      3154        3154 movies #> # ℹ 1 more variable: id <chr> if (FALSE) { # \\dontrun{ # Stats for multiple shows at once shows_stats(c(\"breaking-bad\", \"game-of-thrones\"))  # Stats for multiple episodes episodes_stats(\"futurama\", season = 1, episode = 1:7) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/media_translations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get translations for a movie, show or episode — media_translations","title":"Get translations for a movie, show or episode — media_translations","text":"Get translations movie, show episode","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_translations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get translations for a movie, show or episode — media_translations","text":"","code":"movies_translations(id, languages = NULL)  shows_translations(id, languages = NULL)  episodes_translations(id, season = 1L, episode = 1L, languages = NULL)"},{"path":"https://jemus42.github.io/tRakt/reference/media_translations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get translations for a movie, show or episode — media_translations","text":"movies_translations() wraps endpoint movies/:id/translations/:language. shows_translations() wraps endpoint shows/:id/translations/:language. episodes_translations() wraps endpoint shows/:id/seasons/:season/episodes/:episode/translations/:language.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_translations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get translations for a movie, show or episode — media_translations","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_translations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get translations for a movie, show or episode — media_translations","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/media_translations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get translations for a movie, show or episode — media_translations","text":"","code":"# Get all translations movies_translations(\"193972\") #> # A tibble: 46 × 5 #>    title                                     overview   tagline language country #>    <chr>                                     <chr>      <chr>   <chr>    <chr>   #>  1 حكاية لعبة 4                              \"استعد لل… مغامرة… ar       sa      #>  2 Играта на играчките: Пътешествието        \"Уди вина… Приклю… bg       bg      #>  3 NA                                        \"Compte! … Torna … ca       es      #>  4 Toy Story 4: Příběh hraček                \"Kovboj W… Připra… cs       cz      #>  5 NA                                        \"Siden An… NA      da       dk      #>  6 A Toy Story: Alles hört auf kein Kommando \"Die Cowb… Hier s… de       de      #>  7 Η Ιστορία των Παιχνιδιών 4                \"Στη διάρ… Η περι… el       gr      #>  8 Toy Story 4                               \"Woody ha… Get Re… en       us      #>  9 NA                                        \"Cuando u… Woody … es       mx      #> 10 NA                                        \"Woody si… La ave… es       es      #> # ℹ 36 more rows  # Only get a specific language movies_translations(\"193972\", \"de\") #> # A tibble: 1 × 5 #>   title                                     overview    tagline language country #>   <chr>                                     <chr>       <chr>   <chr>    <chr>   #> 1 A Toy Story: Alles hört auf kein Kommando Die Cowboy… Hier s… de       de"},{"path":"https://jemus42.github.io/tRakt/reference/media_watching.html","id":null,"dir":"Reference","previous_headings":"","what":"Get who's watching a thing right now — media_watching","title":"Get who's watching a thing right now — media_watching","text":"Get watching thing right now","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_watching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get who's watching a thing right now — media_watching","text":"","code":"movies_watching(id, extended = c(\"min\", \"full\"))  shows_watching(id, extended = c(\"min\", \"full\"))  seasons_watching(id, season = 1L, extended = c(\"min\", \"full\"))  episodes_watching(id, season = 1L, episode = 1L, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/media_watching.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get who's watching a thing right now — media_watching","text":"movies_watching() wraps endpoint movies/:id/watching. shows_watching() wraps endpoint shows/:id/watching. episodes_watching() wraps endpoint shows/:id/seasons/:season/episodes/:episode/watching.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_watching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get who's watching a thing right now — media_watching","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_watching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get who's watching a thing right now — media_watching","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/media_watching.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get who's watching a thing right now — media_watching","text":"movies_watching(): watching movie. shows_watching(): watching show. seasons_watching(): watching season. episodes_watching(): watching episode.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/media_watching.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get who's watching a thing right now — media_watching","text":"","code":"if (FALSE) { # \\dontrun{ movies_watching(\"deadpool-2016\") shows_watching(\"the-simpsons\") seasons_watching(\"the-simpsons\", season = 6) episodes_watching(\"the-simpsons\", season = 6, episode = 12) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/movies_boxoffice.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the weekend box office — movies_boxoffice","title":"Get the weekend box office — movies_boxoffice","text":"Returns top 10 grossing movies U.S. box office last weekend. Updated every Monday morning.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_boxoffice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the weekend box office — movies_boxoffice","text":"","code":"movies_boxoffice(extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/movies_boxoffice.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get the weekend box office — movies_boxoffice","text":"movies_boxoffice() wraps endpoint movies/boxoffice.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_boxoffice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the weekend box office — movies_boxoffice","text":"extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_boxoffice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the weekend box office — movies_boxoffice","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/movies_boxoffice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the weekend box office — movies_boxoffice","text":"","code":"movies_boxoffice() #> # A tibble: 10 × 7 #>     revenue title                             year trakt   slug      imdb  tmdb  #>       <int> <chr>                            <int> <chr>   <chr>     <chr> <chr> #>  1 19000000 Mickey 17                         2025 540151  mickey-1… tt12… 6965… #>  2  8500000 Captain America: Brave New World  2025 655031  captain-… tt14… 8221… #>  3  4200000 Last Breath                       2025 781338  last-bre… tt14… 9725… #>  4  3900000 The Monkey                        2025 904978  the-monk… tt27… 1124… #>  5  3900000 Paddington in Peru                2024 365073  paddingt… tt58… 5167… #>  6  3500000 Dog Man                           2025 611948  dog-man-… tt10… 7743… #>  7  1900000 Anora                             2024 856080  anora-20… tt28… 1064… #>  8  1700000 Mufasa: The Lion King             2024 600937  mufasa-t… tt13… 7625… #>  9  1600000 Rule Breakers                     2025 1127179 rule-bre… tt23… 1379… #> 10  1100000 Night of the Zoopocalypse         2025 996400  night-of… tt29… 1205…"},{"path":"https://jemus42.github.io/tRakt/reference/movies_related.html","id":null,"dir":"Reference","previous_headings":"","what":"Get similiar(ish) movies — movies_related","title":"Get similiar(ish) movies — movies_related","text":"Get similiar(ish) movies","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_related.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get similiar(ish) movies — movies_related","text":"","code":"movies_related(id, limit = 10L, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/movies_related.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get similiar(ish) movies — movies_related","text":"movies_related() wraps endpoint movies/:id/related.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_related.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get similiar(ish) movies — movies_related","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_related.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get similiar(ish) movies — movies_related","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/movies_related.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get similiar(ish) movies — movies_related","text":"","code":"movies_related(\"the-avengers-2012\", limit = 5) #> # A tibble: 5 × 7 #>   related_to        title                           year trakt slug  imdb  tmdb  #>   <chr>             <chr>                          <int> <chr> <chr> <chr> <chr> #> 1 the-avengers-2012 Captain America: The First Av…  2011 1170  capt… tt04… 1771  #> 2 the-avengers-2012 Iron Man                        2008 1157  iron… tt03… 1726  #> 3 the-avengers-2012 Thor                            2011 5408  thor… tt08… 10195 #> 4 the-avengers-2012 Guardians of the Galaxy         2014 82405 guar… tt20… 1183… #> 5 the-avengers-2012 X-Men                           2000 23299 x-me… tt01… 36657"},{"path":"https://jemus42.github.io/tRakt/reference/movies_releases.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a movie's release details — movies_releases","title":"Get a movie's release details — movies_releases","text":"Retrieve one movie's release information, including release date, country code (two letter, e.g. us), certification (e.g. PG).","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_releases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a movie's release details — movies_releases","text":"","code":"movies_releases(id, country = NULL)"},{"path":"https://jemus42.github.io/tRakt/reference/movies_releases.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a movie's release details — movies_releases","text":"movies_releases() wraps endpoint movies/:id/releases/:country.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_releases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a movie's release details — movies_releases","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. country Optional two letter country code filter . See trakt_countries table country codes.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_releases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a movie's release details — movies_releases","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/movies_releases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a movie's release details — movies_releases","text":"","code":"if (FALSE) { # \\dontrun{ movies_releases(\"tron-legacy-2010\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/movies_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single movie — movies_summary","title":"Get a single movie — movies_summary","text":"Get single movie","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single movie — movies_summary","text":"","code":"movies_summary(id, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/movies_summary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a single movie — movies_summary","text":"movies_summary() wraps endpoint movies/:id.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single movie — movies_summary","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/movies_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single movie — movies_summary","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/movies_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single movie — movies_summary","text":"","code":"# Minimal info by default movies_summary(\"inception-2010\") #> # A tibble: 1 × 6 #>   title      year trakt slug           imdb      tmdb  #>   <chr>     <int> <chr> <chr>          <chr>     <chr> #> 1 Inception  2010 16662 inception-2010 tt1375666 27205 if (FALSE) { # \\dontrun{ # Full information,  multiple movies movies_summary(c(\"inception-2010\", \"the-dark-knight-2008\"), extended = \"full\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/pad_episode.html","id":null,"dir":"Reference","previous_headings":"","what":"Easy episode number padding — pad_episode","title":"Easy episode number padding — pad_episode","text":"Simple function ease creation sXXeYY episode ids. Note s e must length.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/pad_episode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easy episode number padding — pad_episode","text":"","code":"pad_episode(s = \"0\", e = \"0\", s_width = 2, e_width = 2)"},{"path":"https://jemus42.github.io/tRakt/reference/pad_episode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easy episode number padding — pad_episode","text":"s Input season number, coerced character. e Input episode number, coerced character. s_width length season number padding. Defaults 2. e_width length episode number padding. Defaults 2.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/pad_episode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easy episode number padding — pad_episode","text":"character common sXXeYY format","code":""},{"path":"https://jemus42.github.io/tRakt/reference/pad_episode.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Easy episode number padding — pad_episode","text":"like sXXeYY format, okay?","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/pad_episode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easy episode number padding — pad_episode","text":"","code":"# Season 2, episode 4 pad_episode(2, 4) #> [1] \"s02e04\" pad_episode(1, 85, e_width = 3) #> [1] \"s01e085\""},{"path":"https://jemus42.github.io/tRakt/reference/people_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single person's movie or show credits — people_media","title":"Get a single person's movie or show credits — people_media","text":"Returns movies shows person cast crew.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/people_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single person's movie or show credits — people_media","text":"","code":"people_movies(id, extended = c(\"min\", \"full\"))  people_shows(id, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/people_media.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a single person's movie or show credits — people_media","text":"people_movies() wraps endpoint people/:id/movies. people_shows() wraps endpoint people/:id/shows.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/people_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single person's movie or show credits — people_media","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/people_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single person's movie or show credits — people_media","text":"list one tibbles cast crew. latter tibble objects flat possible.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/people_media.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a single person's movie or show credits — people_media","text":"Note 2019-09-30, two representations character[s] job[s]: One regular character variable, list-column. singular deprecated included compatibility reasons.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/people_media.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single person's movie or show credits — people_media","text":"","code":"if (FALSE) { # \\dontrun{ people_movies(\"christopher-nolan\")  people_shows(\"kit-harington\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/people_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single person's details — people_summary","title":"Get a single person's details — people_summary","text":"Get single person's details, like various IDs. extended \"full\", also biographical data available, e.g. birthday.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/people_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single person's details — people_summary","text":"","code":"people_summary(id, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/people_summary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a single person's details — people_summary","text":"people_summary() wraps endpoint people/:id.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/people_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single person's details — people_summary","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/people_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single person's details — people_summary","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/people_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single person's details — people_summary","text":"","code":"# A single person's extended information people_summary(\"bryan-cranston\", \"full\") #> # A tibble: 4 × 14 #>   name           social_ids   biography     birthday   death birthplace homepage #>   <chr>          <named list> <chr>         <date>     <chr> <chr>      <chr>    #> 1 Bryan Cranston <chr [1]>    \"Bryan Lee C… 1956-03-07 NA    Hollywood… NA       #> 2 Bryan Cranston <chr [1]>    \"Bryan Lee C… 1956-03-07 NA    Hollywood… NA       #> 3 Bryan Cranston <chr [1]>    \"Bryan Lee C… 1956-03-07 NA    Hollywood… NA       #> 4 Bryan Cranston <NULL>       \"Bryan Lee C… 1956-03-07 NA    Hollywood… NA       #> # ℹ 7 more variables: known_for_department <chr>, gender <chr>, #> #   updated_at <dttm>, trakt <chr>, slug <chr>, imdb <chr>, tmdb <chr>  # Multiple people people_summary(c(\"kit-harington\", \"emilia-clarke\")) #> # A tibble: 2 × 5 #>   name          trakt  slug          imdb      tmdb    #>   <chr>         <chr>  <chr>         <chr>     <chr>   #> 1 Kit Harington 436512 kit-harington nm3229685 239019  #> 2 Emilia Clarke 436511 emilia-clarke nm3592338 1223786"},{"path":"https://jemus42.github.io/tRakt/reference/played_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Most played media — played_media","title":"Most played media — played_media","text":"functions return played movies/shows trakt.tv.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/played_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Most played media — played_media","text":"","code":"movies_played(   limit = 10,   extended = c(\"min\", \"full\"),   period = c(\"weekly\", \"monthly\", \"yearly\", \"all\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL )  shows_played(   limit = 10,   extended = c(\"min\", \"full\"),   period = c(\"weekly\", \"monthly\", \"yearly\", \"all\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL,   networks = NULL,   status = NULL )"},{"path":"https://jemus42.github.io/tRakt/reference/played_media.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Most played media — played_media","text":"movies_played() wraps endpoint movies/played/:period. shows_played() wraps endpoint shows/played/:period.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/played_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Most played media — played_media","text":"limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. period character(1) [\"weekly\"]: period filter . Possible values \"weekly\", \"monthly\", \"yearly\", \"\". query character(1): Search string titles descriptions. search_query() fields searched depending type media. See API docs full reference. years character | integer: 4-digit year (2010) range, e.g. \"2010-2020\". Can also integer vector length two coerced appropriately, e.g. c(2010, 2020). genres character(n): Genre  slug(s). See trakt_genres table genres. Multiple values allowed concatenated. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). countries character(n): Two-letter country code(s). See trakt_countries. runtimes character | integer: Integer range minutes, e.g. 30-90. Can also integer vector length two coerced appropriately. ratings character | integer:  Integer range 0 100. Can also integer vector length two coerced appropriately. Note user-supplied ratings range 1 10, yet ratings site scaled range 1 100. certifications character(n): Certification(s) like pg-13. Multiple values allowed. Use trakt_certifications reference. Note different certifications shows movies. networks character(n): (Shows ) Network name like HBO. See trakt_networks list known networks. status character(n): (Shows ) status shows. One \"returning series\", \"production\", \"planned\", \"canceled\", \"ended\".","code":""},{"path":"https://jemus42.github.io/tRakt/reference/played_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Most played media — played_media","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/played_media.html","id":"the-dynamic-lists-on-trakt-tv","dir":"Reference","previous_headings":"","what":"The Dynamic Lists on trakt.tv","title":"Most played media — played_media","text":"functions access automatically updated lists provided trakt.tv. function comes two flavors: Shows movies. following descriptions adapted directly API reference. Popular: Popularity calculated using rating percentage number ratings. Trending: Returns movies/shows watched right now. Movies/shows users returned first. Played: Returns played (single user can watch multiple times) movies/shows specified time period. Watched: Returns watched (unique users) movies/shows specified time period. Collected: Returns collected (unique users) movies/shows specified time period. Anticipated: Returns anticipated movies/shows based number lists movie/show appears . functions Played, Watched, Collected Played return additional variables besides media information: watcher_count, play_count, collected_count, collector_count.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/popular_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Popular media — popular_media","title":"Popular media — popular_media","text":"functions return popular movies/shows trakt.tv.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/popular_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Popular media — popular_media","text":"","code":"movies_popular(   limit = 10,   extended = c(\"min\", \"full\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL )  shows_popular(   limit = 10,   extended = c(\"min\", \"full\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL,   networks = NULL,   status = NULL )"},{"path":"https://jemus42.github.io/tRakt/reference/popular_media.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Popular media — popular_media","text":"movies_popular() wraps endpoint movies/popular. shows_popular() wraps endpoint shows/popular.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/popular_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Popular media — popular_media","text":"limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. query character(1): Search string titles descriptions. search_query() fields searched depending type media. See API docs full reference. years character | integer: 4-digit year (2010) range, e.g. \"2010-2020\". Can also integer vector length two coerced appropriately, e.g. c(2010, 2020). genres character(n): Genre  slug(s). See trakt_genres table genres. Multiple values allowed concatenated. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). countries character(n): Two-letter country code(s). See trakt_countries. runtimes character | integer: Integer range minutes, e.g. 30-90. Can also integer vector length two coerced appropriately. ratings character | integer:  Integer range 0 100. Can also integer vector length two coerced appropriately. Note user-supplied ratings range 1 10, yet ratings site scaled range 1 100. certifications character(n): Certification(s) like pg-13. Multiple values allowed. Use trakt_certifications reference. Note different certifications shows movies. networks character(n): (Shows ) Network name like HBO. See trakt_networks list known networks. status character(n): (Shows ) status shows. One \"returning series\", \"production\", \"planned\", \"canceled\", \"ended\".","code":""},{"path":"https://jemus42.github.io/tRakt/reference/popular_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Popular media — popular_media","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/popular_media.html","id":"the-dynamic-lists-on-trakt-tv","dir":"Reference","previous_headings":"","what":"The Dynamic Lists on trakt.tv","title":"Popular media — popular_media","text":"functions access automatically updated lists provided trakt.tv. function comes two flavors: Shows movies. following descriptions adapted directly API reference. Popular: Popularity calculated using rating percentage number ratings. Trending: Returns movies/shows watched right now. Movies/shows users returned first. Played: Returns played (single user can watch multiple times) movies/shows specified time period. Watched: Returns watched (unique users) movies/shows specified time period. Collected: Returns collected (unique users) movies/shows specified time period. Anticipated: Returns anticipated movies/shows based number lists movie/show appears . functions Played, Watched, Collected Played return additional variables besides media information: watcher_count, play_count, collected_count, collector_count.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/popular_media.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Popular media — popular_media","text":"","code":"if (FALSE) { # \\dontrun{ # Get the most popular German-language movies between 2000 and 2010 movies_popular(languages = \"de\", years = c(2000, 2010)) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/search_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Search trakt.tv via text query or ID — search_query","title":"Search trakt.tv via text query or ID — search_query","text":"Search show movie keyword (e.g. \"Breaking Bad\") receive basic info first search result. main use retrieve IDs proper show/movie title use, well receiving quick overview show/movie.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/search_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search trakt.tv via text query or ID — search_query","text":"","code":"search_query(   query,   type = \"show\",   n_results = 1L,   extended = c(\"min\", \"full\"),   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL,   networks = NULL,   status = NULL )  search_id(   id,   id_type = c(\"trakt\", \"imdb\", \"tmdb\", \"tvdb\"),   type = \"show\",   n_results = 1L,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/search_query.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search trakt.tv via text query or ID — search_query","text":"search_query() wraps endpoint search/:type?query=. search_id() wraps endpoint search/:id_type/:id?type=.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/search_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search trakt.tv via text query or ID — search_query","text":"query character(1): Search string titles descriptions. search_query() fields searched depending type media. See API docs full reference. type character(1) [\"show\"]: type data looking . One show, movie, episode, person list character vector elements, e.g. c(\"show\", \"movie\"). Note every combination reasonably combinable, e.g. c(\"movie\", \"list\"). Use separate function calls case. n_results integer(1) [1]: many results return. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. years character | integer: 4-digit year (2010) range, e.g. \"2010-2020\". Can also integer vector length two coerced appropriately, e.g. c(2010, 2020). genres character(n): Genre  slug(s). See trakt_genres table genres. Multiple values allowed concatenated. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). countries character(n): Two-letter country code(s). See trakt_countries. runtimes character | integer: Integer range minutes, e.g. 30-90. Can also integer vector length two coerced appropriately. ratings character | integer:  Integer range 0 100. Can also integer vector length two coerced appropriately. Note user-supplied ratings range 1 10, yet ratings site scaled range 1 100. certifications character(n): Certification(s) like pg-13. Multiple values allowed. Use trakt_certifications reference. Note different certifications shows movies. networks character(n): (Shows ) Network name like HBO. See trakt_networks list known networks. status character(n): (Shows ) status shows. One \"returning series\", \"production\", \"planned\", \"canceled\", \"ended\". id character(1): id used search, e.g. 14701 Trakt ID. id_type character(1) [\"trakt\"]: type id. One trakt, imdb, tmdb, tvdb.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/search_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search trakt.tv via text query or ID — search_query","text":"tibble containing n_results results. Variable type equivalent value type argument, variable score indicates search match, 1000 perfect match. results found, tibble 0 rows. one type specified, e.g. c(\"movie\", \"show\"), n_results results per type.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/search_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search trakt.tv via text query or ID — search_query","text":"amount information returned equal *_summary API methods turn depends value extended. See also API reference fields item metadata searched default.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/search_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search trakt.tv via text query or ID — search_query","text":"","code":"# A show search_query(\"Breaking Bad\", type = \"show\", n_results = 3) #> # A tibble: 3 × 9 #>   type  score title              year trakt  slug              tvdb  imdb  tmdb  #>   <chr> <dbl> <chr>             <int> <chr>  <chr>             <chr> <chr> <chr> #> 1 show  1523. Stargirl           2020 138096 stargirl          3618… tt87… 80986 #> 2 show  1381. GLOW               2017 116959 glow              3248… tt57… 70573 #> 3 show  1339. Too Hot to Handle  2020 160347 too-hot-to-handle 3799… tt12… 1020… if (FALSE) { # \\dontrun{ # A show by its trakt id, and now with more information search_id(1388, \"trakt\", type = \"show\", extended = \"full\")  # A person search_query(\"J. K. Simmons\", type = \"person\", extended = \"full\")  # A movie or a show, two of each search_query(\"Tron\", type = c(\"movie\", \"show\"), n_results = 2) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/seasons_season.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a season of a show — seasons_season","title":"Get a season of a show — seasons_season","text":"Similar seasons_summary, function returns full data single season, .e. episodes season","code":""},{"path":"https://jemus42.github.io/tRakt/reference/seasons_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a season of a show — seasons_season","text":"","code":"seasons_season(id, seasons = 1L, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/seasons_season.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a season of a show — seasons_season","text":"seasons_season() wraps endpoint shows/id/seasons/season.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/seasons_season.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a season of a show — seasons_season","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. seasons integer(1) [1L]: season(s) get. Use 0 specials. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/seasons_season.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a season of a show — seasons_season","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/seasons_season.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a season of a show — seasons_season","text":"want quickly gather episode data available seasons, see seasons_summary use episodes = TRUE parameter.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/seasons_season.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a season of a show — seasons_season","text":"","code":"if (FALSE) { # \\dontrun{ seasons_season(\"breaking-bad\", 1)  # Including all episode data: seasons_season(\"breaking-bad\", 1, extended = \"full\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/seasons_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a show's seasons — seasons_summary","title":"Get a show's seasons — seasons_summary","text":"Get details show's seasons, e.g. many seasons  many epsiodes season . episodes == TRUE extended == \"full\", function also suitable retrieve episode data seasons show just single API call.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/seasons_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a show's seasons — seasons_summary","text":"","code":"seasons_summary(   id,   episodes = FALSE,   drop_specials = TRUE,   drop_unaired = TRUE,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/seasons_summary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a show's seasons — seasons_summary","text":"seasons_summary() wraps endpoint shows/:id/seasons.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/seasons_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a show's seasons — seasons_summary","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. episodes logical(1) [FALSE]: TRUE, episodes season appended list-column, amount variables depending extended. drop_specials logical(1) [TRUE]: Special episodes (season 0) dropped drop_unaired logical(1) [TRUE]: Seasons without aired episodes dropped. works extended \"full\". extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/seasons_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a show's seasons — seasons_summary","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/seasons_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a show's seasons — seasons_summary","text":"","code":"# Get just the season numbers and their IDs seasons_summary(\"breaking-bad\", extended = \"min\") #> # A tibble: 5 × 4 #>   season trakt tvdb   tmdb  #>    <int> <chr> <chr>  <chr> #> 1      1 3950  30272  3572  #> 2      2 3951  40719  3573  #> 3      3 3952  171641 3575  #> 4      4 3953  297361 3576  #> 5      5 3954  490110 3578  if (FALSE) { # \\dontrun{ # Get season numbers, ratings, votes, titles and other metadata as well as # a list-column containing all episode data seasons_summary(\"utopia\", extended = \"full\", episodes = TRUE) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/shows_next_episode.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a shows next or latest episode — shows_next_episode","title":"Get a shows next or latest episode — shows_next_episode","text":"Get shows next latest episode","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_next_episode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a shows next or latest episode — shows_next_episode","text":"","code":"shows_next_episode(id, extended = c(\"min\", \"full\"))  shows_last_episode(id, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/shows_next_episode.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a shows next or latest episode — shows_next_episode","text":"shows_next_episode() wraps endpoint shows/:id/next_episode. shows_last_episode() wraps endpoint shows/:id/last_episode.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_next_episode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a shows next or latest episode — shows_next_episode","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_next_episode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a shows next or latest episode — shows_next_episode","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/shows_next_episode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a shows next or latest episode — shows_next_episode","text":"","code":"shows_next_episode(\"one-piece\") #> # A tibble: 1 × 7 #>   season number title        trakt    tvdb  imdb  tmdb    #>    <int>  <int> <chr>        <chr>    <chr> <chr> <chr>   #> 1     22   1123 Episode 1123 12642700 NA    NA    5852518 shows_last_episode(\"one-piece\", extended = \"full\") #> # A tibble: 1 × 17 #>   season number title             number_abs overview rating votes comment_count #>    <int>  <int> <chr>                  <int> <chr>     <dbl> <int>         <int> #> 1     22   1122 The Last Lesson!…       1122 Avalo P…   8.91   129             7 #> # ℹ 9 more variables: first_aired <dttm>, updated_at <dttm>, #> #   available_translations <list>, runtime <int>, episode_type <chr>, #> #   trakt <chr>, tvdb <chr>, imdb <chr>, tmdb <chr>"},{"path":"https://jemus42.github.io/tRakt/reference/shows_related.html","id":null,"dir":"Reference","previous_headings":"","what":"Get similiar(ish) shows — shows_related","title":"Get similiar(ish) shows — shows_related","text":"Get similiar(ish) shows","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_related.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get similiar(ish) shows — shows_related","text":"","code":"shows_related(id, limit = 10L, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/shows_related.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get similiar(ish) shows — shows_related","text":"shows_related() wraps endpoint shows/:id/related.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_related.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get similiar(ish) shows — shows_related","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_related.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get similiar(ish) shows — shows_related","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/shows_related.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get similiar(ish) shows — shows_related","text":"","code":"shows_related(\"breaking-bad\", limit = 5) #> # A tibble: 5 × 8 #>   related_to   title             year trakt  slug             tvdb   imdb  tmdb  #>   <chr>        <chr>            <int> <chr>  <chr>            <chr>  <chr> <chr> #> 1 breaking-bad Better Call Saul  2015 59660  better-call-saul 273181 tt30… 60059 #> 2 breaking-bad The Wire          2002 1429   the-wire         79126  tt03… 1438  #> 3 breaking-bad The Sopranos      1999 1389   the-sopranos     75299  tt01… 1398  #> 4 breaking-bad Ozark             2017 119913 ozark            329089 tt50… 69740 #> 5 breaking-bad Narcos            2015 94630  narcos           282670 tt27… 63351"},{"path":"https://jemus42.github.io/tRakt/reference/shows_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single show — shows_summary","title":"Get a single show — shows_summary","text":"Get single show","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single show — shows_summary","text":"","code":"shows_summary(id, extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/shows_summary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a single show — shows_summary","text":"shows_summary() wraps endpoint shows/:id.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single show — shows_summary","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/shows_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single show — shows_summary","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/shows_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single show — shows_summary","text":"","code":"# Minimal info by default shows_summary(\"breaking-bad\") #> # A tibble: 1 × 7 #>   title         year trakt slug         tvdb  imdb      tmdb  #>   <chr>        <int> <chr> <chr>        <chr> <chr>     <chr> #> 1 Breaking Bad  2008 1388  breaking-bad 81189 tt0903747 1396  if (FALSE) { # \\dontrun{ # More information shows_summary(\"breaking-bad\", extended = \"full\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/tRakt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tRakt: Get Data from 'trakt.tv' — tRakt-package","title":"tRakt: Get Data from 'trakt.tv' — tRakt-package","text":"wrapper https://trakt.tv API retrieve data shows movies, including user ratings, credits related metadata. Additional functions retrieve user-specific information including collections history watched items. full API reference available https://trakt.docs.apiary.io.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/tRakt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tRakt: Get Data from 'trakt.tv' — tRakt-package","text":"Maintainer: Lukas Burk github@quantenbrot.de (ORCID)","code":""},{"path":"https://jemus42.github.io/tRakt/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_api_common_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Common API parameters — trakt_api_common_parameters","title":"Common API parameters — trakt_api_common_parameters","text":"parameters used extensively throughout package required many API methods. documented one place, intended make individual function documentation consistent.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_api_common_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common API parameters — trakt_api_common_parameters","text":"id character(1): ID item requested. Preferably trakt ID (e.g. 1429). options trakt.tv slug (e.g. \"-wire\") imdb ID (e.g. \"tt0306414\"). Can also length greater 1, case function called id values separately result combined. See vignette(\"finding-things\") details. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. type character(1): Either \"shows\" \"movies\". season/episode-specific functions, values seasons episodes also allowed. user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. period character(1) [\"weekly\"]: period filter . Possible values \"weekly\", \"monthly\", \"yearly\", \"\". limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). season, episode integer(1) [1L]: season eisode number. longer, e.g. 1:5, function vectorized output combined. may result lot API calls. Use wisely. start_date character(1): date past count updates. date supplied, default use yesterday relative current date. Value must either standard YYYY-MM-DD format object class Date, coerced via .character(). sort character(1) [\"newest\"]: Comment sort order, one \"newest\", \"oldest\", \"likes\" \"replies\". query character(1): Search string titles descriptions. search_query() fields searched depending type media. See API docs full reference. years character | integer: 4-digit year (2010) range, e.g. \"2010-2020\". Can also integer vector length two coerced appropriately, e.g. c(2010, 2020). genres character(n): Genre  slug(s). See trakt_genres table genres. Multiple values allowed concatenated. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). countries character(n): Two-letter country code(s). See trakt_countries. runtimes character | integer: Integer range minutes, e.g. 30-90. Can also integer vector length two coerced appropriately. ratings character | integer:  Integer range 0 100. Can also integer vector length two coerced appropriately. Note user-supplied ratings range 1 10, yet ratings site scaled range 1 100. certifications character(n): Certification(s) like pg-13. Multiple values allowed. Use trakt_certifications reference. Note different certifications shows movies. networks character(n): (Shows ) Network name like HBO. See trakt_networks list known networks. status character(n): (Shows ) status shows. One \"returning series\", \"production\", \"planned\", \"canceled\", \"ended\".","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_api_common_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common API parameters — trakt_api_common_parameters","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_credentials.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the required trakt.tv API credentials — trakt_credentials","title":"Set the required trakt.tv API credentials — trakt_credentials","text":"trakt_credentials searches credentials stores appropriate environment variables name. make work automatically, place key environment variables ~/.Renviron (see Details). Arguments function take precedence configuration file.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_credentials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the required trakt.tv API credentials — trakt_credentials","text":"","code":"trakt_credentials(username, client_id, client_secret, silent = TRUE)"},{"path":"https://jemus42.github.io/tRakt/reference/trakt_credentials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the required trakt.tv API credentials — trakt_credentials","text":"username character(1): Explicitly set trakt.tv username (optional). client_id character(1): Explicitly set API client ID (required API interaction). client_secret character(1): Explicitly set API client secret (required authenticated API interaction). silent logical(1) [TRUE]: messages printed showing API information. Mostly debug purposes.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_credentials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the required trakt.tv API credentials — trakt_credentials","text":"Invisibly: list elements username, client_id client_secret, values TRUE corresponding value non-empty.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_credentials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the required trakt.tv API credentials — trakt_credentials","text":"function called automatically package loaded via library(tRakt) tRakt::fun function calls – basically never use stored credentials advised. Additionally, regular (non-authenticated) API interaction, set credentials package's client_secret used fallback, allows use functions box. Set appropriate values ~/.Renviron like :   () environment option trakt_client_secret set non-empty string (.e. \"\"), requests made using authentication.","code":"# tRakt trakt_username=jemus42 trakt_client_id=12[...]f2 trakt_client_secret=f23[...]2nkjb"},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/trakt_credentials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the required trakt.tv API credentials — trakt_credentials","text":"","code":"if (FALSE) { # \\dontrun{ # Use a values set in ~/.Renviron in an R session: # (This is automatically executed when calling library(tRakt)) trakt_credentials(silent = FALSE)  # Explicitly set values in an R session, overriding .Renviron values trakt_credentials(   username = \"jemus42\",   client_id = \"totallylegitclientsecret\",   silent = FALSE ) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/trakt_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Cached filter datasets — trakt_datasets","title":"Cached filter datasets — trakt_datasets","text":"datasets used internally check optional filter parameters certain functions (see search_query dynamic lists like shows_popular). unlikely change often therefore included package datasets.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cached filter datasets — trakt_datasets","text":"","code":"trakt_genres  trakt_languages  trakt_networks  trakt_countries  trakt_certifications"},{"path":"https://jemus42.github.io/tRakt/reference/trakt_datasets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cached filter datasets — trakt_datasets","text":"Every dataset tibble(). following list includes dataset topic link API documentation, short description list variables example values: Genres: Genres shows movies (two-letter codes) trakt.tv knows. 3 Variables: name (\"Action\"), slug (\"action\"), type (\"movies\") Languages: Languages (two-letter codes) trakt.tv knows. 3 Variables: name (\"Arabic\"), code (\"ar\"), type (\"movies\") Networks: TV networks trakt.tv knows. 2 Variables: name (\"TBS\"), name_clean (\"tbs\") (lower-case, trailing whitespaces) Countries: Country names (two-letter codes). 3 Variables: name (\"Belarus\"), code (\"\"), type (\"movies\") Certifications: TV movie certifications (e.g. \"PG-13\" likes). 5 Variables: country (\"us\" ), name (\"TV-PG\"), slug (\"tv-pg\"), description (\"Parental Guidance Suggested\"), type (\"shows\") object class tbl_df (inherits tbl, data.frame) 64 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 244 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 3081 rows 2 columns. object class tbl_df (inherits tbl, data.frame) 350 rows 3 columns. object class tbl_df (inherits tbl, data.frame) 12 rows 5 columns.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cached filter datasets — trakt_datasets","text":"datasets prefixed trakt_ purely avoid confusion masking filter arguments name.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_datasets.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cached filter datasets — trakt_datasets","text":"Currently US certifications available.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cached filter datasets — trakt_datasets","text":"","code":"head(trakt_genres) #> # A tibble: 6 × 3 #>   name      slug      type   #>   <chr>     <chr>     <chr>  #> 1 Action    action    movies #> 2 Action    action    shows  #> 3 Adventure adventure movies #> 4 Adventure adventure shows  #> 5 Animation animation movies #> 6 Animation animation shows  head(trakt_languages) #> # A tibble: 6 × 3 #>   name      code  type   #>   <chr>     <chr> <chr>  #> 1 Afar      aa    movies #> 2 Abkhazian ab    movies #> 3 Abkhazian ab    shows  #> 4 Afrikaans af    movies #> 5 Afrikaans af    shows  #> 6 Akan      ak    movies head(trakt_networks) #> # A tibble: 6 × 2 #>   name       name_clean #>   <chr>      <chr>      #> 1 \" - None\"  - none     #> 2 \" 10 Play\" 10 play    #> 3 \" Inc.\"    inc.       #> 4 \" VTV \"    vtv        #> 5 \"#0\"       #0         #> 6 \"&TV\"      &tv        head(trakt_countries) #> # A tibble: 6 × 3 #>   name                 code  type   #>   <chr>                <chr> <chr>  #> 1 Andorra              ad    movies #> 2 Andorra              ad    shows  #> 3 United Arab Emirates ae    movies #> 4 United Arab Emirates ae    shows  #> 5 Afghanistan          af    movies #> 6 Afghanistan          af    shows  trakt_certifications #> # A tibble: 12 × 5 #>    country name      slug  description                                     type  #>    <chr>   <chr>     <chr> <chr>                                           <chr> #>  1 us      G         g     All Ages                                        movi… #>  2 us      PG        pg    Parental Guidance Suggested                     movi… #>  3 us      PG-13     pg-13 Parents Strongly Cautioned - Ages 13+ Recommen… movi… #>  4 us      R         r     Mature Audiences - Ages 17+ Recommended         movi… #>  5 us      Not Rated nr    Not Rated                                       movi… #>  6 us      TV-Y      tv-y  All Children                                    shows #>  7 us      TV-Y7     tv-y7 Older Children - Ages 7+ Recommended            shows #>  8 us      TV-G      tv-g  All Ages                                        shows #>  9 us      TV-PG     tv-pg Parental Guidance Suggested                     shows #> 10 us      TV-14     tv-14 Parents Strongly Cautioned - Ages 14+ Recommen… shows #> 11 us      TV-MA     tv-ma Mature Audiences - Ages 17+ Recommended         shows #> 12 us      Not Rated nr    Not Rated                                       shows"},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an API call and receive parsed output — trakt_get","title":"Make an API call and receive parsed output — trakt_get","text":"basic form API interaction: Querying specific URL getting parsed result. response empty, function returns empty tibble(), date-time variables present response, converted POSIXct via lubridate::ymd_hms() Date via lubridate::as_date() variable contains date information.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an API call and receive parsed output — trakt_get","text":"","code":"trakt_get(url, client_id = Sys.getenv(\"trakt_client_id\"), HEAD = FALSE)"},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an API call and receive parsed output — trakt_get","text":"url character(1): API endpoint. Either full URL like \"https://api.trakt.tv/shows/breaking-bad\" just endpoint like shows/breaking-bad. client_id character(1): API client ID. value set, defaults package's client ID. See trakt_credentials information. HEAD logical(1) [FALSE]: TRUE, HTTP HEAD request performed content returned. useful interested status codes headers, want waste resources/bandwidth response body.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an API call and receive parsed output — trakt_get","text":"parsed (jsonlite::fromJSON()) content API response. empty tibble() response empty JSON array.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an API call and receive parsed output — trakt_get","text":"See official API reference detailed overview available methods. methods potential interest data collection dedicated functions package.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Make an API call and receive parsed output — trakt_get","text":"OAuth2 methods supported yet, meaning access POST methods user information non-public profiles.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an API call and receive parsed output — trakt_get","text":"","code":"# A simple request to a direct URL trakt_get(\"https://api.trakt.tv/shows/breaking-bad\") #> $title #> [1] \"Breaking Bad\" #>  #> $year #> [1] 2008 #>  #> $ids #> $ids$trakt #> [1] 1388 #>  #> $ids$slug #> [1] \"breaking-bad\" #>  #> $ids$tvdb #> [1] 81189 #>  #> $ids$imdb #> [1] \"tt0903747\" #>  #> $ids$tmdb #> [1] 1396 #>  #> $ids$tvrage #> NULL #>  #>   # A HEAD-only request # useful for validating a URL exists or the API is accessible trakt_get(\"https://api.trakt.tv/users/jemus42\", HEAD = TRUE) #> $status #> [1] 200 #>  #> $version #> [1] \"HTTP/2\" #>  #> $headers #> $date #> [1] \"Fri, 14 Mar 2025 11:10:34 GMT\" #>  #> $`content-type` #> [1] \"application/json; charset=utf-8\" #>  #> $`x-frame-options` #> [1] \"SAMEORIGIN\" #>  #> $`x-xss-protection` #> [1] \"0\" #>  #> $`x-content-type-options` #> [1] \"nosniff\" #>  #> $`x-download-options` #> [1] \"noopen\" #>  #> $`x-permitted-cross-domain-policies` #> [1] \"none\" #>  #> $`referrer-policy` #> [1] \"strict-origin-when-cross-origin\" #>  #> $`x-private-user` #> [1] \"false\" #>  #> $vary #> [1] \"Accept-Encoding\" #>  #> $`content-encoding` #> [1] \"gzip\" #>  #> $etag #> [1] \"W/\\\"57d1105a10f4fe65bad7623019f1f026\\\"\" #>  #> $`cache-control` #> [1] \"max-age=0, private, must-revalidate\" #>  #> $`x-request-id` #> [1] \"35e473a4-a53b-40fb-9d15-eafda31981f3\" #>  #> $`x-runtime` #> [1] \"0.007632\" #>  #> $`cf-cache-status` #> [1] \"DYNAMIC\" #>  #> $`speculation-rules` #> [1] \"\\\"/cdn-cgi/speculation\\\"\" #>  #> $server #> [1] \"cloudflare\" #>  #> $`cf-ray` #> [1] \"92035346eca65a03-IAD\" #>  #> $`alt-svc` #> [1] \"h3=\\\":443\\\"; ma=86400\" #>  #> attr(,\"class\") #> [1] \"insensitive\" \"list\"        #>   # Optionally be lazy about URL specification by dropping the hostname: trakt_get(\"shows/game-of-thrones\") #> $title #> [1] \"Game of Thrones\" #>  #> $year #> [1] 2011 #>  #> $ids #> $ids$trakt #> [1] 1390 #>  #> $ids$slug #> [1] \"game-of-thrones\" #>  #> $ids$tvdb #> [1] 121361 #>  #> $ids$imdb #> [1] \"tt0944947\" #>  #> $ids$tmdb #> [1] 1399 #>  #> $ids$tvrage #> NULL #>  #>"},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a trakt.tv OAuth2 token — trakt_get_token","title":"Get a trakt.tv OAuth2 token — trakt_get_token","text":"used internally authenticated requests.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a trakt.tv OAuth2 token — trakt_get_token","text":"","code":"trakt_get_token()"},{"path":"https://jemus42.github.io/tRakt/reference/trakt_get_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a trakt.tv OAuth2 token — trakt_get_token","text":"OAuth2 token object. See oauth2.0_token.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/trending_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Trending media — trending_media","title":"Trending media — trending_media","text":"functions return trending movies/shows trakt.tv.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trending_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trending media — trending_media","text":"","code":"movies_trending(   limit = 10,   extended = c(\"min\", \"full\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL )  shows_trending(   limit = 10,   extended = c(\"min\", \"full\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL,   networks = NULL,   status = NULL )"},{"path":"https://jemus42.github.io/tRakt/reference/trending_media.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Trending media — trending_media","text":"movies_trending() wraps endpoint movies/trending. shows_trending() wraps endpoint shows/trending.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trending_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trending media — trending_media","text":"limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. query character(1): Search string titles descriptions. search_query() fields searched depending type media. See API docs full reference. years character | integer: 4-digit year (2010) range, e.g. \"2010-2020\". Can also integer vector length two coerced appropriately, e.g. c(2010, 2020). genres character(n): Genre  slug(s). See trakt_genres table genres. Multiple values allowed concatenated. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). countries character(n): Two-letter country code(s). See trakt_countries. runtimes character | integer: Integer range minutes, e.g. 30-90. Can also integer vector length two coerced appropriately. ratings character | integer:  Integer range 0 100. Can also integer vector length two coerced appropriately. Note user-supplied ratings range 1 10, yet ratings site scaled range 1 100. certifications character(n): Certification(s) like pg-13. Multiple values allowed. Use trakt_certifications reference. Note different certifications shows movies. networks character(n): (Shows ) Network name like HBO. See trakt_networks list known networks. status character(n): (Shows ) status shows. One \"returning series\", \"production\", \"planned\", \"canceled\", \"ended\".","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trending_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trending media — trending_media","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/trending_media.html","id":"the-dynamic-lists-on-trakt-tv","dir":"Reference","previous_headings":"","what":"The Dynamic Lists on trakt.tv","title":"Trending media — trending_media","text":"functions access automatically updated lists provided trakt.tv. function comes two flavors: Shows movies. following descriptions adapted directly API reference. Popular: Popularity calculated using rating percentage number ratings. Trending: Returns movies/shows watched right now. Movies/shows users returned first. Played: Returns played (single user can watch multiple times) movies/shows specified time period. Watched: Returns watched (unique users) movies/shows specified time period. Collected: Returns collected (unique users) movies/shows specified time period. Anticipated: Returns anticipated movies/shows based number lists movie/show appears . functions Played, Watched, Collected Played return additional variables besides media information: watcher_count, play_count, collected_count, collector_count.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's collected shows or movies — user_collection","title":"Get a user's collected shows or movies — user_collection","text":"Get user's collected shows movies","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's collected shows or movies — user_collection","text":"","code":"user_collection(   user = getOption(\"trakt_username\"),   type = c(\"shows\", \"movies\"),   unnest_episodes = FALSE,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/user_collection.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's collected shows or movies — user_collection","text":"user_collection() wraps endpoint users/:id/collection/:type.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's collected shows or movies — user_collection","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. type character(1): Either \"shows\" \"movies\". season/episode-specific functions, values seasons episodes also allowed. unnest_episodes logical(1) [FALSE]: Unnests episode data using tidyr::unnest() returns one row per episode rather one row per show. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's collected shows or movies — user_collection","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_collection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a user's collected shows or movies — user_collection","text":"function wraps API method /users/:user_id/collection/:type.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_collection.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a user's collected shows or movies — user_collection","text":"extended = \"metadata\" API parameter implemented. add media information media_type, resolution, audio, audio_channels 3D output, may may available. feature important , please open issue GitHub.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_collection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's collected shows or movies — user_collection","text":"","code":"if (FALSE) { # \\dontrun{ user_collection(user = \"sean\", type = \"movies\") user_collection(user = \"sean\", type = \"shows\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's comments — user_comments","title":"Get a user's comments — user_comments","text":"Get user's comments","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's comments — user_comments","text":"","code":"user_comments(   user = getOption(\"trakt_username\"),   comment_type = c(\"all\", \"reviews\", \"shouts\"),   type = c(\"all\", \"movies\", \"shows\", \"seasons\", \"episodes\", \"lists\"),   include_replies = FALSE )"},{"path":"https://jemus42.github.io/tRakt/reference/user_comments.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's comments — user_comments","text":"user_comments() wraps endpoint users/:id/comments/:comment_type/:type?include_replies=.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's comments — user_comments","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. comment_type character(1) [\"\"]: type comment, one \"\", \"reviews\" \"shouts\". type character(1) [\"\"]: type media filter , one \"\", \"movies\", \"shows\", \"seasons\", \"episodes\" \"lists\". include_replies logical(1) [FALSE]: Whether include replies.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's comments — user_comments","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's comments — user_comments","text":"","code":"if (FALSE) { # \\dontrun{ user_comments(\"jemus42\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's watch history — user_history","title":"Get a user's watch history — user_history","text":"Retrieve last limit items user watched, including method logged (e.g. scrobble checkin).","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's watch history — user_history","text":"","code":"user_history(   user = getOption(\"trakt_username\"),   type = c(\"shows\", \"movies\"),   limit = 10L,   start_at = NULL,   end_at = NULL,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/user_history.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's watch history — user_history","text":"user_history() wraps endpoint users/:id/history/:type/:item_id?start_at=&end_at=.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's watch history — user_history","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. type character(1): Either \"shows\" \"movies\". season/episode-specific functions, values seasons episodes also allowed. limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). start_at, end_at character(1): time-window filter . Must coercible datetime object class POSIXct. See ISOdate information. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's watch history — user_history","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_history.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a user's watch history — user_history","text":"function wraps API method /users/:id/history/:type.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_history.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a user's watch history — user_history","text":"type = \"shows\", original output contains nested object show episode data, unnested function. Due duplicate variable names, episode-related variables prefixed episode_. results episode number name episode_episode, quite silly. Sorry.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's watch history — user_history","text":"","code":"if (FALSE) { # \\dontrun{ # Shows user \"jemus42\" watched around christmas 2016 user_history(   user = \"jemus42\", type = \"shows\", limit = 5,   start_at = \"2015-12-24\", end_at = \"2015-12-28\" ) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_likes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get items (comments, lists) a user likes — user_likes","title":"Get items (comments, lists) a user likes — user_likes","text":"Get items (comments, lists) user likes","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_likes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get items (comments, lists) a user likes — user_likes","text":"","code":"user_likes(type = c(\"comments\", \"lists\"))"},{"path":"https://jemus42.github.io/tRakt/reference/user_likes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get items (comments, lists) a user likes — user_likes","text":"user_likes() wraps endpoint users/likes/:type (Authentication required).","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_likes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get items (comments, lists) a user likes — user_likes","text":"type character(1) [\"comments\"]: One \"comments\", \"lists\".","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_likes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get items (comments, lists) a user likes — user_likes","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_likes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get items (comments, lists) a user likes — user_likes","text":"","code":"# Get liked lists (only if there's a client secret set) # See ?trakt_credentials if (trakt_credentials()[[\"client_secret\"]]) {   user_likes(\"lists\") }"},{"path":"https://jemus42.github.io/tRakt/reference/user_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single list — user_list","title":"Get a single list — user_list","text":"Retrieve single list user created together information user. Use extended = \"full\" retrieve user profile data, similiar user_profile. returned variables trakt (list ID) slug (list slug) can used retrieve list's items via user_list_items.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single list — user_list","text":"","code":"user_list(   user = getOption(\"trakt_username\"),   list_id,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/user_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single list — user_list","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. list_id list identifier, either trakt ID slug list. Can optained via website (URL slug) e.g. user_lists. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single list — user_list","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a single list — user_list","text":"embedded user data, name renamed user_name due duplication e.g. list names, slug renamed user_slug reason.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single list — user_list","text":"","code":"if (FALSE) { # \\dontrun{ user_list(\"jemus42\", list_id = 2121308) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_list_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get comments on a user-created list — user_list_comments","title":"Get comments on a user-created list — user_list_comments","text":"Get comments user-created list","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get comments on a user-created list — user_list_comments","text":"","code":"user_list_comments(   user = getOption(\"trakt_username\"),   list_id,   sort = c(\"newest\", \"oldest\", \"likes\", \"replies\"),   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/user_list_comments.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get comments on a user-created list — user_list_comments","text":"user_list_comments() wraps endpoint users/:id/lists/:list_id/comments/:sort.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get comments on a user-created list — user_list_comments","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. list_id list identifier, either trakt ID slug list. Can optained via website (URL slug) e.g. user_lists. sort character(1) [\"newest\"]: Comment sort order, one \"newest\", \"oldest\", \"likes\" \"replies\". extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list_comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get comments on a user-created list — user_list_comments","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_list_comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get comments on a user-created list — user_list_comments","text":"","code":"if (FALSE) { # \\dontrun{ user_list_comments(\"donxy\", \"1248149\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_list_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's list's items — user_list_items","title":"Get a user's list's items — user_list_items","text":"Get user's list's items","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's list's items — user_list_items","text":"","code":"user_list_items(   user = getOption(\"trakt_username\"),   list_id,   type = NULL,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/user_list_items.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's list's items — user_list_items","text":"user_list_items() wraps endpoint users/:id/lists/:list_id/items/:type.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's list's items — user_list_items","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. list_id list identifier, either trakt ID slug list. Can optained via website (URL slug) e.g. user_lists. type character(1) [NULL]: NULL, items media type returned. Possible values \"movie\", \"show\", \"season\", \"episode\", \"person\". extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_list_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's list's items — user_list_items","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_list_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's list's items — user_list_items","text":"","code":"if (FALSE) { # \\dontrun{ # A large list with various media types # All items user_list_items(\"sp1ti\", list_id = \"5615781\", extended = \"min\")  # Movies only user_list_items(\"sp1ti\", list_id = \"5615781\", extended = \"min\", type = \"movie\")  # Shows... user_list_items(\"sp1ti\", list_id = \"5615781\", extended = \"min\", type = \"shows\")  # Only seasons user_list_items(\"sp1ti\", list_id = \"5615781\", extended = \"min\", type = \"season\")  # Only episodes user_list_items(\"sp1ti\", list_id = \"5615781\", extended = \"min\", type = \"episodes\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's lists — user_lists","title":"Get a user's lists — user_lists","text":"Retrieve lists user created together information user. Use extended = \"full\" retrieve user profile data, similiar user_profile. returned variables trakt (list ID) slug (list slug) can used retrieve list's items via user_list_items.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's lists — user_lists","text":"","code":"user_lists(user = getOption(\"trakt_username\"), extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/user_lists.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's lists — user_lists","text":"user_lists() wraps endpoint users/:id/lists.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's lists — user_lists","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's lists — user_lists","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_lists.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a user's lists — user_lists","text":"embedded user data, name renamed user_name due duplication e.g. list names, slug renamed user_slug reason.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's lists — user_lists","text":"","code":"if (FALSE) { # \\dontrun{ user_lists(\"jemus42\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's social connections — user_network","title":"Get a user's social connections — user_network","text":"Get followers, followings friends (two-way relationship).","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's social connections — user_network","text":"","code":"user_followers(user = getOption(\"trakt_user\"), extended = \"min\")  user_following(user = getOption(\"trakt_user\"), extended = \"min\")  user_friends(user = getOption(\"trakt_user\"), extended = \"min\")"},{"path":"https://jemus42.github.io/tRakt/reference/user_network.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's social connections — user_network","text":"user_followers() wraps endpoint users/:id/followers. user_following() wraps endpoint users/:id/following. user_friends() wraps endpoint users/:id/friends.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's social connections — user_network","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's social connections — user_network","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_network.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a user's social connections — user_network","text":"specified user private, need able make authenticated request friends user.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's social connections — user_network","text":"","code":"if (FALSE) { # \\dontrun{ user_followers(user = \"sean\") } # } if (FALSE) { # \\dontrun{ user_following(user = \"sean\") } # } if (FALSE) { # \\dontrun{ user_friends(user = \"sean\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's profile — user_profile","title":"Get a user's profile — user_profile","text":"Get user's profile","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's profile — user_profile","text":"","code":"user_profile(user = getOption(\"trakt_username\"), extended = c(\"min\", \"full\"))"},{"path":"https://jemus42.github.io/tRakt/reference/user_profile.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's profile — user_profile","text":"user_profile() wraps endpoint users/:id.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's profile — user_profile","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's profile — user_profile","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_profile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a user's profile — user_profile","text":"specified user private, need able make authenticated request friends user.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's profile — user_profile","text":"","code":"if (FALSE) { # \\dontrun{ user_profile(\"sean\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_ratings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's ratings — user_ratings","title":"Get a user's ratings — user_ratings","text":"Retrieve user's media ratings","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_ratings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's ratings — user_ratings","text":"","code":"user_ratings(   user = getOption(\"trakt_username\"),   type = c(\"movies\", \"seasons\", \"shows\", \"episodes\"),   rating = NULL,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/user_ratings.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's ratings — user_ratings","text":"user_ratings() wraps endpoint users/:id/ratings/:type/:rating.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_ratings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's ratings — user_ratings","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. type character(1): Either \"shows\" \"movies\". season/episode-specific functions, values seasons episodes also allowed. rating integer(1) [NULL]: Optional rating 1 10 filter . extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_ratings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's ratings — user_ratings","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_ratings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's ratings — user_ratings","text":"","code":"if (FALSE) { # \\dontrun{ user_ratings(user = \"jemus42\", \"shows\") user_ratings(user = \"sean\", type = \"movies\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns stats about the movies, shows, and episodes a user has watched, collected, and rated. — user_stats","title":"Returns stats about the movies, shows, and episodes a user has watched, collected, and rated. — user_stats","text":"Data user's interactions movies, shows, seasons, episodes, well social network (friends, followings, followers) frequency table user's media ratings far.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns stats about the movies, shows, and episodes a user has watched, collected, and rated. — user_stats","text":"","code":"user_stats(user = getOption(\"trakt_username\"))"},{"path":"https://jemus42.github.io/tRakt/reference/user_stats.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Returns stats about the movies, shows, and episodes a user has watched, collected, and rated. — user_stats","text":"user_stats() wraps endpoint users/:id/stats.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns stats about the movies, shows, and episodes a user has watched, collected, and rated. — user_stats","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns stats about the movies, shows, and episodes a user has watched, collected, and rated. — user_stats","text":"list tibbles containing following elements: \"movies\" \"shows\" \"seasons\" \"episodes\" \"network\" \"ratings\"","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns stats about the movies, shows, and episodes a user has watched, collected, and rated. — user_stats","text":"","code":"if (FALSE) { # \\dontrun{ user_stats(user = \"sean\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_watched.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's watched shows or movies — user_watched","title":"Get a user's watched shows or movies — user_watched","text":"private users, authenticated request required.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_watched.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's watched shows or movies — user_watched","text":"","code":"user_watched(   user = getOption(\"trakt_username\"),   type = c(\"shows\", \"movies\"),   noseasons = TRUE,   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/user_watched.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's watched shows or movies — user_watched","text":"user_watched() wraps endpoint users/:id/watched/:type.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_watched.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's watched shows or movies — user_watched","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. type character(1): Either \"shows\" \"movies\". season/episode-specific functions, values seasons episodes also allowed. noseasons logical(1) [TRUE]: type = \"show\": Exclude detailed season data output. advisable need per-episode data want nice API. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_watched.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's watched shows or movies — user_watched","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_watched.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's watched shows or movies — user_watched","text":"","code":"if (FALSE) { # \\dontrun{ # Use noseasons = TRUE to avoid receiving detailed season/episode data user_watched(user = \"sean\", noseasons = TRUE) } # }"},{"path":"https://jemus42.github.io/tRakt/reference/user_watchlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a user's watchlist — user_watchlist","title":"Get a user's watchlist — user_watchlist","text":"Get user's watchlist","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_watchlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a user's watchlist — user_watchlist","text":"","code":"user_watchlist(   user = getOption(\"trakt_username\"),   type = c(\"movies\", \"shows\"),   extended = c(\"min\", \"full\") )"},{"path":"https://jemus42.github.io/tRakt/reference/user_watchlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a user's watchlist — user_watchlist","text":"user_watchlist() wraps endpoint users/:id/watchlist/:type.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_watchlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a user's watchlist — user_watchlist","text":"user character(1): Target username (slug). Defaults getOption(\"trakt_username\"). Can also length greater 1, case function called user values separately result combined. type character(1): Either \"shows\" \"movies\". season/episode-specific functions, values seasons episodes also allowed. extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/user_watchlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a user's watchlist — user_watchlist","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/reference/user_watchlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a user's watchlist — user_watchlist","text":"","code":"if (FALSE) { # \\dontrun{ # Defaults to movie watchlist and minimal info user_watchlist(user = \"sean\") } # }"},{"path":"https://jemus42.github.io/tRakt/reference/watched_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Most watched media — watched_media","title":"Most watched media — watched_media","text":"functions return watched movies/shows trakt.tv.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/watched_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Most watched media — watched_media","text":"","code":"movies_watched(   limit = 10,   extended = c(\"min\", \"full\"),   period = c(\"weekly\", \"monthly\", \"yearly\", \"all\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL )  shows_watched(   limit = 10,   extended = c(\"min\", \"full\"),   period = c(\"weekly\", \"monthly\", \"yearly\", \"all\"),   query = NULL,   years = NULL,   genres = NULL,   languages = NULL,   countries = NULL,   runtimes = NULL,   ratings = NULL,   certifications = NULL,   networks = NULL,   status = NULL )"},{"path":"https://jemus42.github.io/tRakt/reference/watched_media.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Most watched media — watched_media","text":"movies_watched() wraps endpoint movies/watched/:period. shows_watched() wraps endpoint shows/watched/:period.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/watched_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Most watched media — watched_media","text":"limit integer(1) [10L]: Number items return. Must greater 0 coerced via .integer(). extended character(1): Either \"min\" (API default) \"full\". latter returns variables generally used required. See vignette(\"finding-things\") details. period character(1) [\"weekly\"]: period filter . Possible values \"weekly\", \"monthly\", \"yearly\", \"\". query character(1): Search string titles descriptions. search_query() fields searched depending type media. See API docs full reference. years character | integer: 4-digit year (2010) range, e.g. \"2010-2020\". Can also integer vector length two coerced appropriately, e.g. c(2010, 2020). genres character(n): Genre  slug(s). See trakt_genres table genres. Multiple values allowed concatenated. languages character(n): Two-letter language code(s). Also see trakt_languages available languages (code name). countries character(n): Two-letter country code(s). See trakt_countries. runtimes character | integer: Integer range minutes, e.g. 30-90. Can also integer vector length two coerced appropriately. ratings character | integer:  Integer range 0 100. Can also integer vector length two coerced appropriately. Note user-supplied ratings range 1 10, yet ratings site scaled range 1 100. certifications character(n): Certification(s) like pg-13. Multiple values allowed. Use trakt_certifications reference. Note different certifications shows movies. networks character(n): (Shows ) Network name like HBO. See trakt_networks list known networks. status character(n): (Shows ) status shows. One \"returning series\", \"production\", \"planned\", \"canceled\", \"ended\".","code":""},{"path":"https://jemus42.github.io/tRakt/reference/watched_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Most watched media — watched_media","text":"tibble(). function limit parameter (defaulting 10), (maximum) number rows tibble. results (API unreachable), empty tibble() returned.","code":""},{"path":"https://jemus42.github.io/tRakt/reference/watched_media.html","id":"the-dynamic-lists-on-trakt-tv","dir":"Reference","previous_headings":"","what":"The Dynamic Lists on trakt.tv","title":"Most watched media — watched_media","text":"functions access automatically updated lists provided trakt.tv. function comes two flavors: Shows movies. following descriptions adapted directly API reference. Popular: Popularity calculated using rating percentage number ratings. Trending: Returns movies/shows watched right now. Movies/shows users returned first. Played: Returns played (single user can watch multiple times) movies/shows specified time period. Watched: Returns watched (unique users) movies/shows specified time period. Collected: Returns collected (unique users) movies/shows specified time period. Anticipated: Returns anticipated movies/shows based number lists movie/show appears . functions Played, Watched, Collected Played return additional variables besides media information: watcher_count, play_count, collected_count, collector_count.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0169000-development-version","dir":"Changelog","previous_headings":"","what":"tRakt 0.16.9000 (development version)","title":"tRakt 0.16.9000 (development version)","text":"Remove magrittr import use |> internally, hence bumping R dependency >= 4.1.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0160","dir":"Changelog","previous_headings":"","what":"tRakt 0.16.0","title":"tRakt 0.16.0","text":"Add GitHub actions via usethis::use_github_actions() Use tidy CI setup via usethis::use_tidy_ci(), bumps R dependency >= 3.2.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"authenticated-requests-0-16-0","dir":"Changelog","previous_headings":"","what":"Authenticated requests","title":"tRakt 0.16.0","text":"default, requests API now made using authentication trakt_client_secret set. See ?trakt_credentials() details set credentials. secret available, unauthenticated requests made previous versions. case, still need either built-trakt_client_id. OAuth2 support comes need handle secrets, .e. .httr-oauth files. can pain headless/automated setups, trying keep “auth needed” default, (implemented) endpoints don’t strictly require authentication. See vignette(\"Implemented-API-methods\", package = \"tRakt\") overview implemented methods indicator whether authentication required (usually isn’t).","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"new-functions-0-16-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"tRakt 0.16.0","text":"episodes_summary() [shows/:id/seasons/:season/episodes/:episode]: seasons_season() seasons_summary() , single episode. really implemented completeness’ sake. Wraps method. user_profile() [user/:id]: Get user’s profile. user_lists() [users/:id/lists]: Get user lists. user_list() [users/:id/lists/:list_id]: Get single list. user_list_items() [users/:id/lists/:list_id/items/:type]: Get items said lists.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"the-renamingering-0-16-0","dir":"Changelog","previous_headings":"","what":"The Renamingering","title":"tRakt 0.16.0","text":"Rename things snake_case drop trakt. prefix. results () functions mapping directly API endpoints form section_method, e.g. API endpoint movies/collected handled function movies_collected().","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"search-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"Search","title":"tRakt 0.16.0","text":"trakt.search -> search_query() trakt.search.byid -> search_id()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"dynamic-lists-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"Dynamic Lists","title":"tRakt 0.16.0","text":"-> movies_popular() -> shows_popular() -> movies_trending() -> shows_trending() -> movies_anticipated() -> shows_anticipated() -> movies_played() -> shows_played() -> movies_watched() -> shows_watched() -> movies_collected() -> shows_collected() -> movies_updates() -> shows_updates()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"movies-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"Movies","title":"tRakt 0.16.0","text":"trakt.movies.summary -> movies_summary() trakt.movies.boxoffice -> movies_boxoffice() trakt.movies.releases -> movies_releases() trakt.movies.people -> movies_people()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"shows-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"Shows","title":"tRakt 0.16.0","text":"trakt.shows.summary -> shows_summary() trakt.shows.people -> shows_people()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"seasons-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"Seasons","title":"tRakt 0.16.0","text":"trakt.seasons.summary -> seasons_summary() trakt.seasons.season -> seasons_season() (’s silly, know, oh well)","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"ratings-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"Ratings","title":"tRakt 0.16.0","text":"trakt.movies.ratings -> movies_ratings() trakt.shows.ratings -> shows_ratings() trakt.seasons.ratings -> seasons_ratings() trakt.episodes.ratings -> episodes_ratings()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"related-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"Related","title":"tRakt 0.16.0","text":"trakt.movies.related -> movies_related() trakt.shows.related -> shows_related()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"stats-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"Stats","title":"tRakt 0.16.0","text":"trakt.movies.stats -> movies_stats() trakt.shows.stats -> shows_stats() trakt.seasons.stats -> seasons_stats() trakt.episodes.stats -> episodes_stats()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"people-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"People","title":"tRakt 0.16.0","text":"trakt.people.summary -> people_summary() trakt.people.movies -> people_movies() trakt.people.shows -> people_shows()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"user-functions-0-16-0","dir":"Changelog","previous_headings":"The Renamingering","what":"User functions","title":"tRakt 0.16.0","text":"-> user_followers() -> user_following() -> user_friends() trakt.user.collection -> user_collection() trakt.user.history -> user_history() trakt.user.ratings -> user_ratings() trakt.user.stats -> user_stats() trakt.user.watched -> user_watched() trakt.user.watchlist -> user_watchlist()","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0150","dir":"Changelog","previous_headings":"","what":"tRakt 0.15.0","title":"tRakt 0.15.0","text":"big one, 1.0.0 big one guess. consolidation release lots internal improvements, 1.0.0 decided overhaul structure package , completely break kind backwards compatiblity, thought ’d get one .","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"consolidation-for-the-people-0-15-0","dir":"Changelog","previous_headings":"","what":"Consolidation for the people","title":"tRakt 0.15.0","text":"Major refactor docs. Sadly, user notice little consistency. Consolidate related functions Rd page Centrally document common parameters reuse needed Also consolidate many similar functions factoring relevant bits flexible helper functions. cases exported well. process, functions partially renamed (.show. -> .shows., .movie. -> .movies.) consistency. Rename get_trakt_credentials -> trakt_credentials Many functions now return much flatter output, notably *people* functions. return list cast crew objects, turn flat tibbles.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"features-0-15-0","dir":"Changelog","previous_headings":"","what":"Features","title":"tRakt 0.15.0","text":"result year NA search score == 1000, ’s probably bad dropped. Added automated list methods, like anticipated, played watched items. Added trakt.user.history user/:id/history methods","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0140","dir":"Changelog","previous_headings":"","what":"tRakt 0.14.0","title":"tRakt 0.14.0","text":"Many functions refactored, cases changes output. functions return tibble now, additionally computed variables removed well.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"starting-to-clean-things-up-with-some-major-housekeeping-0-14-0","dir":"Changelog","previous_headings":"","what":"Starting to clean things up with some major housekeeping","title":"tRakt 0.14.0","text":"usethis::use_* things, basically. Add pkgdown site README.Rmd Use codecov Apply styler::style_pkg() Update documentation use markdown Redo vignette Tests. many tests.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"less-plyr-more-purrr-0-14-0","dir":"Changelog","previous_headings":"","what":"Less plyr, more purrr","title":"tRakt 0.14.0","text":"Completely removed plyr dependency favor purrr","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0130","dir":"Changelog","previous_headings":"","what":"tRakt 0.13.0","title":"tRakt 0.13.0","text":"Expand handling season_nums argument make easier get episodes show. Vectorize enable multiple target input Rename trakt.getFullShowData -> trakt.get_full_showdata","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0121","dir":"Changelog","previous_headings":"","what":"tRakt 0.12.1","title":"tRakt 0.12.1","text":"Vectorize trakt.seasons.summary Fix bugs Improve tests","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"api-changes-functional-fixes-0-12-0","dir":"Changelog","previous_headings":"","what":"API changes, functional fixes","title":"tRakt 0.12.0","text":"Requires extended min since required aired_episodes field present higher levels detail. Add extended param trakt.user.f* Fix trakt.user.f* now return NULL user private instead failing.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"internal-changes-0-12-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"tRakt 0.12.0","text":"trakt.*.popular trakt.*.related trakt.*.trending trakt.*.summary trakt.*.ratings","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"vectorization-improvements-0-12-0","dir":"Changelog","previous_headings":"Internal changes","what":"Vectorization improvements","title":"tRakt 0.12.0","text":"trakt.user.f* functions: Results rbinded together source_user column appended. trakt.seasons.season: Soon make trakt.getEpisodeData obsolete. trakt.*.summary: Forces force_data_frame TRUE enable rbinding. trakt.*.related: Appends source column containing respective input id. trakt.*.ratings: Returns result list entry containing data show movie accommodate distribution variable (data.frame) trakt.people.summary: Appends person column target id. trakt.*.watching: Returns data.frame source column containing target.","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"api-changes-functional-fixes-0-11-3","dir":"Changelog","previous_headings":"","what":"API changes, functional fixes","title":"tRakt 0.11.3","text":"Add build_trakt_url ease trakt API URL assembly reduce duplicate code. Add force_data_frame option trakt.*.summary: Forces unnesting. Rename trakt.show.stats trakt.stats, work movies shows soon API endpoint actually works.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"minor-changes-0-11-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"tRakt 0.11.3","text":"Expand @family tags docs little","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"api-changes-functional-fixes-0-11-2","dir":"Changelog","previous_headings":"","what":"API changes, functional fixes","title":"tRakt 0.11.2","text":"Add trakt.movie.watching trakt.show.watching: Get trakt.tv users watching. Add trakt.movie.releases: Gets release dates & certifications per movie. Fix trakt.search.byid: Used work shows, now actually works movies. Fix fix_datetime (internal): improve reliability.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"minor-changes-0-11-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"tRakt 0.11.2","text":"Fix documentation error *.movie.* functions. Added tests new functions","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0111","dir":"Changelog","previous_headings":"","what":"tRakt 0.11.1","title":"tRakt 0.11.1","text":"TODO: Create generic functions movie show functions reduce duplicate code Add extended param trakt.user.watchlist Rename slug id.slug Ensure proper datetime conversion Fix error trakt.user.watchlist type = shows ignored accident","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0110","dir":"Changelog","previous_headings":"","what":"tRakt 0.11.0","title":"tRakt 0.11.0","text":"Rename trakt.getSeasons  -> trakt.seasons.summary consistency trakt API. Rename trakt.show.season -> trakt.seasons.season consistency trakt API. Rename getNameFromUrl    -> parse_trakt_url descriptive. Also, de-camelCasezation. Update vignette reflect changes trakt.people.summary trakt.people.movies trakt.people.shows Unify output trakt.show.people trakt.movie.people Add extended argument trakt.movies.related trakt.shows.related (defaults min) trakt.shows.popular trakt.shows.trending trakt.movies.popular trakt.movies.trending usual bug fixes","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0103","dir":"Changelog","previous_headings":"","what":"tRakt 0.10.3","title":"tRakt 0.10.3","text":"Tidy rating distribution Remove .data.frame option output messy Add another @family tag docs aggregation functions (.popular, .trending, .related) Individual functions don’t warn missing headers, ’s trakt.api.call’s job. Explicitly drop episodes NA firstaired fields episode_abs field usually NA, let’s dump epnum Use extended = \"min\" default across functions consistency trakt API","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0102","dir":"Changelog","previous_headings":"","what":"tRakt 0.10.2","title":"tRakt 0.10.2","text":"Add year parameter trakt.search query trakt.search ends 4 digit number, used year parameter stripped original query Minor internal fixes","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0101","dir":"Changelog","previous_headings":"","what":"tRakt 0.10.1","title":"tRakt 0.10.1","text":"Add testthat tests lubridate::parse_date_time fails, .POSIXct used fallback Various bug fixes","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-0100","dir":"Changelog","previous_headings":"","what":"tRakt 0.10.0","title":"tRakt 0.10.0","text":"trakt.movies.popular: Analogous trakt.shows.popular trakt.movies.trending: Analogous trakt.shows.trending trakt.movie.summary: Get single movie’s details, analogous trakt.show.summary trakt.movies.related: Get related movies trakt.movie.people: Analogous trakt.show.people Add trakt.show.ratings trakt.movie.ratings receive just ratings distribution single show movie Rename trakt.show.related -> trakt.shows.related consistency .trending .popular Expand allowed target params accordance changed trakt API docs","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-090","dir":"Changelog","previous_headings":"","what":"tRakt 0.9.0","title":"tRakt 0.9.0","text":"Specified exclusive package version requirements avoid unforseen errors Add trakt.user.ratings: Currently supported types: shows, movies, episodes Add extended option trakt.shows.popular .trending Make code vignette little robust","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-081","dir":"Changelog","previous_headings":"","what":"tRakt 0.8.1","title":"tRakt 0.8.1","text":"Fix whole bunch typos found CRAN release, naturally date fields ending .posix removed existing date fiels now converted POSIXct remove cluttering firstaired.posix -> first_aired etc Update vignette change","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"trakt-080","dir":"Changelog","previous_headings":"","what":"tRakt 0.8.0","title":"tRakt 0.8.0","text":"Added user-facing functions (trakt.user.following / .followers / .friends) maybe want throw networkD3 people Improve consistency date variables: .posix variables removed existing date variables just properly converted POSIXct Improve documentation: Added @family tags functions group together Add package vignette Minor fixes non-breaking additions Trying keep things organized got inconsistently header’d NEWS.md","code":""},{"path":[]},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"id_2015-0-0-1","dir":"Changelog","previous_headings":"","what":"2015-02-16","title":"tRakt 0.0.1","text":"’ve working user-specific methods, can now use trakt.user.* family functions get user’s… Collection: trakt.user.collection() Watched items: trakt.user.watched() Stats: trakt.user.stats() default username set getOption(\"trakt.username\"), publicly viewable user work. Note OAuth2 implemented, private users can’t accessed.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"id_2015-0-0-1-1","dir":"Changelog","previous_headings":"","what":"2015-02-11","title":"tRakt 0.0.1","text":"today, functions updated use new APIv2, except trakt.show.stats, currently yet implemented trakt.tv, see docs Now package usable , can continue work bug fixes enhancements. Yay.","code":""},{"path":"https://jemus42.github.io/tRakt/news/index.html","id":"id_2015-0-0-1-2","dir":"Changelog","previous_headings":"","what":"2015-02-10","title":"tRakt 0.0.1","text":"now trying migrate everything new trakt.tv APIv2. Since mostly don’t know ’m , make go along, oh well. Now search function trakt.search working fine, function tested/built new API mind. Others come.","code":""}]
